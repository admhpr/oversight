__NUXT_JSONP__("/archive/iterator-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C){return {data:[{page:{slug:"iterator-pattern",title:"The Iterator Pattern",desc:u,published:f,date:"2019-05-04T13:49",publish_date:"04-05-2019 13:54",taxonomy:{category:["blog"],tag:["design patterns","behavioural"]},feed:{limit:10},twitterenable:f,twittercardoptions:"summary",articleenabled:d,musiceventenabled:d,orgaenabled:d,orga:{ratingValue:v},orgaratingenabled:d,eventenabled:d,personenabled:d,musicalbumenabled:d,productenabled:d,product:{ratingValue:v},restaurantenabled:d,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:f,toc:[{id:w,depth:g,text:x},{id:y,depth:g,text:z},{id:A,depth:g,text:B}],body:{type:"root",children:[{type:b,tag:h,props:{id:w},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#name-iterator",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:h,props:{id:y},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#type-behavioural",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:h,props:{id:A},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#use-when-you-want-to",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Access the elements of an object without exposing the underlying presentation."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:u}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Real world example:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"An old radio set will be a good example of iterator, where user could start at some channel and then use next or previous buttons to go through the respective channels. Or take an example of MP3 player or a TV set where you could press the next and previous buttons to go through the consecutive channels or in other words they all provide an interface to iterate through the respective channels, songs or radio stations."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Create a radio station:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"class RadioStation {\n\n    constructor(private frequency: number) {\n        this.frequency = frequency    \n    }\n    \n    getFrequency() {\n        return this.frequency\n    }\n} \n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"And a list of stations"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"class StationList {\n    \n    constructor(public stations: RadioStation[] = []){\n    }\n\n    addStation(station) {\n        this.stations.push(station)\n    }\n    \n    removeStation(toRemove) {\n        const toRemoveFrequency = toRemove.getFrequency()\n        this.stations = this.stations.filter(station =\u003E {\n            return station.getFrequency() !== toRemoveFrequency\n        })\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Iterate through th list:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"const stationList = new StationList()\n\nstationList.addStation(new RadioStation(89))\nstationList.addStation(new RadioStation(101))\nstationList.addStation(new RadioStation(102))\nstationList.addStation(new RadioStation(103.2))\n\nstationList.stations.forEach(station =\u003E console.log(station.getFrequency()))\n\nstationList.removeStation(new RadioStation(89))\n```\n"}]}]}]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Fiterator-pattern",extension:".md",createdAt:"2020-11-24T08:50:03.333Z",updatedAt:"2020-11-28T16:02:17.099Z"}}],fetch:[],mutations:void 0}}("text","element","\n",false,"p",true,2,"h2","a","true",-1,"span","icon","icon-link","div","nuxt-content-highlight","pre","language-text","line-numbers","code","In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container's elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus cannot be decoupled.",2.5,"name-iterator","Name: Iterator","type-behavioural","Type: Behavioural","use-when-you-want-to","Use when you want to:","blockquote")));