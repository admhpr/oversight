__NUXT_JSONP__("/archive/factory-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S){return {data:[{page:{slug:"factory-pattern",title:"The Factory Pattern",date:"2018-12-28T12:14",desc:x,publish_date:"28-12-2018 12:14",taxonomy:{category:["blog"],tag:["design patterns","creational"]},twitterenable:u,twittercardoptions:"summary",articleenabled:k,musiceventenabled:k,orgaenabled:k,orga:{ratingValue:y},orgaratingenabled:k,eventenabled:k,personenabled:k,musicalbumenabled:k,productenabled:k,product:{ratingValue:y},restaurantenabled:k,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:u,toc:[{id:z,depth:m,text:A},{id:B,depth:m,text:C},{id:D,depth:m,text:E},{id:F,depth:m,text:G},{id:H,depth:m,text:I},{id:J,depth:m,text:K},{id:L,depth:m,text:M}],body:{type:"root",children:[{type:b,tag:n,props:{id:z},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#name-factory",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:n,props:{id:B},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#type-creational",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:n,props:{id:D},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#use-when-you-want-to",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:N,props:{},children:[{type:a,value:"Generate an instance for a client without exposing any instantiation logic to the client"}]},{type:a,value:c},{type:b,tag:N,props:{},children:[{type:a,value:"Hide the dependencies of class instantiation from clients"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{id:F},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#variants",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:n,props:{id:H},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#simple",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:x}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Real World Example:"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"You are building a house that needs doors. You can either build the door from scratch, with all the things needed to do so (glue, tools, knowledge) or you can call the factory and have them build a door for you."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:O}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Simple factory simply generates an instance for client without exposing any instantiation logic to the client"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Door interface and implementation"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"interface IDoor{\n    getWidth: () =\u003E number;\n    getHeight: () =\u003E number;\n}\n\nclass WoodenDoor implements IDoor {\n  constructor(public width: number, public height: number){\n  }\n\n  getWidth(): number{\n    return this.width\n  }\n\n  getHeight(): number{\n    return this.height\n  }\n}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Door Factory that makes an instance of the Door"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"class DoorFactory{\n    public static makeDoor(w : number, h: number){ \n        return new WoodenDoor(w, h)\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"And can be used like so:"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"const door = DoorFactory.makeDoor(100, 200)\n\nconsole.log(door.getWidth())\nconsole.log(door.getHeight())\n\nconst anotherDoor = DoorFactory.makeDoor(50,100)\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Full example:"}]},{type:a,value:c},{type:b,tag:w,props:{async:u,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fbkmf1Lct\u002F2\u002Fembed\u002Fjs,result\u002F"},children:[]},{type:a,value:c},{type:b,tag:n,props:{id:J},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#method",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:K}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This is a variation on the simple factory we looked at above. This method is used when there is some generic processing on a class but want to vary what kind of things the processing is done on."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:P}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Consider the case of a hiring manager. It is impossible for one person to interview for each of the positions. Based on the job opening, she has to decide and delegate the interview steps to different people."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Main purpose:"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"It provides a way to delegate the instantiation logic to child classes."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Typescript Code example:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Setup variations of question askers"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"interface IInterviewer{\n    askQuestions: () =\u003E void;\n}\n\nclass Developer implements IInterviewer {\n  askQuestions() {\n    console.log('Asking about design patterns!')\n  }\n}\n\nclass CommunityExecutive implements IInterviewer {\n  askQuestions() {\n    console.log('Asking about community building')\n  }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Asking the question"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"abstract class HiringManager{\n\n    \u002F\u002F Factory method\n    protected abstract makeInterviewer() : IInterviewer;\n\n    public takeInterview(){\n        const interviewer = this.makeInterviewer();\n        interviewer.askQuestions();\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Who asks the question"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"class DevelopmentManager extends HiringManager {\n    makeInterviewer() {\n        return new Developer()\n    }\n}\n\nclass MarketingManager extends HiringManager {\n    makeInterviewer() {\n        return new CommunityExecutive()\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:Q}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"const devManager = new DevelopmentManager()\ndevManager.takeInterview() \u002F\u002F Output: Asking about design patterns\n\nconst marketingManager = new MarketingManager()\nmarketingManager.takeInterview()\u002F\u002F Output: Asking about community building \n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:R}]},{type:a,value:c},{type:b,tag:w,props:{async:u,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fnubskw0c\u002F8\u002Fembed\u002Fjs,result\u002F"},children:[]},{type:a,value:c},{type:b,tag:n,props:{id:L},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#abstract",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:M}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:P}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Back to doors. Say this time we need a wooden door from a wood shop and a iron door from a iron shop. For each type of door you would need a different worker to create and fit the door."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:O}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"A way to group individual but related\u002Fdependant factories together without specifying their concrete class"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Door interface implementation"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"interface Door {\n    getDescription() : void;\n}\n\nclass WoodenDoor implements Door{\n    public getDescription(){\n        console.log('I am a wooden door');\n    }\n}\n\nclass IronDoor implements Door{\n    public getDescription(){\n        console.log('I am an iron door')\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Door Fitter and implemenation"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"interface DoorFittingExpert {\n    getDescription() : void;\n}\n\nclass Welder implements DoorFittingExpert{\n    public getDescription(){\n        console.log('I can only fit iron doors');\n    }\n}\n\nclass Carpenter implements DoorFittingExpert{\n    public getDescription(){\n        console.log('I can only fit wooden doors');\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Grouping the dependencies together"}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"interface DoorFactory {\n    makeDoor(): Door;\n    makeFittingExpert(): DoorFittingExpert;\n}\n\n\u002F\u002F Wooden factory to return carpenter and wooden door\nclass WoodenDoorFactory implements DoorFactory {\n    public makeDoor(): Door {\n        return new WoodenDoor();\n    }\n\n    public makeFittingExpert(): DoorFittingExpert{\n        return new Carpenter();\n    }\n}\n\n\u002F\u002F Iron door factory to get iron door and the relevant fitting expert\nclass IronDoorFactory implements DoorFactory{\n    public makeDoor(): Door {\n        return new IronDoor();\n    }\n\n    public makeFittingExpert(): DoorFittingExpert{\n        return new Welder();\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:Q}]},{type:a,value:c},{type:b,tag:e,props:{className:[f]},children:[{type:b,tag:g,props:{className:[h,i]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"const woodenFactory = new WoodenDoorFactory()\n\nconst woodenDoor = woodenFactory.makeDoor()\nconst woodExpert = woodenFactory.makeFittingExpert()\n\nwoodenDoor.getDescription()  \u002F\u002F Output: I am a wooden door\nwoodExpert.getDescription() \u002F\u002F Output: I can only fit wooden doors\n\n\u002F\u002F Same for Iron Factory\nconst ironFactory = new IronDoorFactory()\n\nconst ironDoor = ironFactory.makeDoor()\nconst ironExpert = ironFactory.makeFittingExpert()\n\nironDoor.getDescription()  \u002F\u002F Output: I am an iron door\nironExpert.getDescription() \u002F\u002F Output: I can only fit iron doors\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:R}]},{type:a,value:c},{type:b,tag:w,props:{async:u,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fo683w0fg\u002F4\u002Fembed\u002Fjs,result\u002F"},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"And that in a nutshell is the factory pattern!"}]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Ffactory-pattern",extension:".md",createdAt:S,updatedAt:S}}],fetch:[],mutations:void 0}}("text","element","\n","p","div","nuxt-content-highlight","pre","language-text","line-numbers","code",false,"blockquote",3,"h3","a","true",-1,"span","icon","icon-link",true,"From Wikipedia:","script","In object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be \"new\".",2.5,"name-factory","Name: Factory","type-creational","Type: Creational","use-when-you-want-to","Use when you want to:","variants","Variants","simple","Simple","method","Method","abstract","Abstract","li","Main Purpose:","Analogy:","Usage","Full Example:","2020-12-03T07:39:51.690Z")));