__NUXT_JSONP__("/archive/decorator-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E){return {data:[{page:{slug:"decorator-pattern",title:"The Decorator Pattern",date:"2019-03-05T12:43",desc:v,publish_date:"05-03-2019 12:43",taxonomy:{category:["blog"],tag:["design patterns","structural"]},twitterenable:f,twittercardoptions:"summary",articleenabled:e,musiceventenabled:e,orgaenabled:e,orga:{ratingValue:w},orgaratingenabled:e,eventenabled:e,personenabled:e,musicalbumenabled:e,productenabled:e,product:{ratingValue:w},restaurantenabled:e,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:f,toc:[{id:x,depth:g,text:y},{id:z,depth:g,text:A},{id:B,depth:g,text:C}],body:{type:"root",children:[{type:b,tag:h,props:{id:x},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#name-decorator",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:h,props:{id:z},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#type-structural",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:h,props:{id:B},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#use-when-you-want-to",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Real World Example:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Say you ran a coffee shop offering multiple ways to serve coffee. How do you know how much to charge? You would add how much each variation costs and add that to the total cost of the coffee. See example below."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Main Purpose:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Start off with a basic coffee definition:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"interface Coffee{\n    getCost() : number;\n    getDescription() : string;\n}\n\nclass SimpleCoffee implements Coffee{\n    public getCost(){\n        return 10;\n    }\n\n    public getDescription(){\n        return 'Simple coffee';\n    }\n}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We want to make the code extensible to allow options to modify it if required. Lets make some add-ons (decorators)"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"class AsLatte implements Coffee{\n\n    constructor(protected coffee: Coffee){\n        this.coffee = coffee;\n    }\n\n    public getCost(){\n        return this.coffee.getCost() + 3;\n    }\n\n  public getDescription() {\n    return `${this.coffee.getDescription()\n    }, foam`\n    }\n}\n\n\nclass WithVanilla implements Coffee\n{\n      constructor(protected coffee: Coffee){\n        this.coffee = coffee;\n    }\n\n    public getCost(){\n        return this.coffee.getCost() + 5;\n    }\n\n  public getDescription() {\n    return `${this.coffee.getDescription()\n    }, vanilla`\n    }\n}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Usage:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"let someCoffee = new SimpleCoffee();\nconsole.log(someCoffee.getCost()); \u002F\u002F 10\nconsole.log(someCoffee.getDescription()); \u002F\u002F Simple Coffee\n\nsomeCoffee = new WithMilk(someCoffee);\nconsole.log(someCoffee.getCost()); \u002F\u002F 12\nconsole.log(someCoffee.getDescription()); \u002F\u002F Simple Coffee milk\n\n\nsomeCoffee = new AsLatte(someCoffee);\nconsole.log(someCoffee.getCost()); \u002F\u002F 15\nconsole.log(someCoffee.getDescription()); \u002F\u002F Simple Coffee milk, foam\n\nsomeCoffee = new WithVanilla(someCoffee);\nconsole.log(someCoffee.getCost()); \u002F\u002F 20\nconsole.log(someCoffee.getDescription()); \u002F\u002F Simple Coffee milk, foam, vanilla\n"}]}]}]},{type:a,value:c},{type:b,tag:"script",props:{async:f,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Ft84vLspz\u002F7\u002Fembed\u002Fjs\u002F"},children:[]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Fdecorator-pattern",extension:".md",createdAt:E,updatedAt:E}}],fetch:[],mutations:void 0}}("text","element","\n","p",false,true,2,"h2","a","true",-1,"span","icon","icon-link","blockquote","div","nuxt-content-highlight","pre","language-text","line-numbers","code","In object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. The decorator pattern is often useful for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.",2.5,"name-decorator","Name: Decorator","type-structural","Type: Structural","use-when-you-want-to","Use when you want to:","Change the behaviour of one object dynamically and transparently, without changing the class of objects.","2020-12-03T07:39:51.690Z")));