__NUXT_JSONP__("/archive/flyweight-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D){return {data:[{page:{slug:"flyweight-pattern",title:"The Flyweight Pattern",date:"2019-03-12T12:16",desc:v,taxonomy:{category:["blog"],tag:["design patterns","structural"]},twitterenable:f,twittercardoptions:"summary",articleenabled:e,musiceventenabled:e,orgaenabled:e,orga:{ratingValue:w},orgaratingenabled:e,eventenabled:e,personenabled:e,musicalbumenabled:e,productenabled:e,product:{ratingValue:w},restaurantenabled:e,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:f,toc:[{id:x,depth:g,text:y},{id:z,depth:g,text:A},{id:B,depth:g,text:C}],body:{type:"root",children:[{type:b,tag:h,props:{id:x},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#name-flyweight",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:h,props:{id:z},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#type-structural",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:h,props:{id:B},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#use-when-you-want-to",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Avoid recomputing data that has previously been computed. (memoization)."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Real World Example:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Say you went to a tea stall at a busy market and ordered some tea. They might make more than one cup to use for the person behid you in the line and therefore save the resources used to boil the water."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Main Purpose:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Setup teapot:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"\u002F\u002F Anything that will be cached is flyweight.\n\u002F\u002F Types of tea here will be flyweights.\nclass Teapot{\n    constructor(public teaType: string) { \n        console.log(`Teapot filled`)\n    }\n\n    public getTeaType() { \n        return this.teaType\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Our tea maker and shop:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"\u002F\u002F Acts as a factory and saves the tea\nclass TeaMaker{\n    protected availableTea = new Map([]);\n\n    public make(preference: string) {\n        if (!this.availableTea.has(preference)) {\n            this.availableTea.set(preference, new Teapot(preference))\n        }\n\n        return this.availableTea.get(preference)\n    }\n}\n\nclass TeaShop{\n    protected orders = [];\n    public constructor(protected teaMaker: TeaMaker) { \n    }\n\n    public takeOrder(teaType: string, table: number) {\n        this.orders[table] = this.teaMaker.make(teaType)\n    }\n\n    public serve(){\n        for( const order in this.orders) {\n            console.log(`Serving ${this.orders[order].getTeaType()} to table #${order}`)\n        }\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Usage:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"const teaMaker = new TeaMaker();\nconst shop = new TeaShop(teaMaker);\n\nshop.takeOrder('lemon', 1);\nshop.takeOrder('milky', 2);\nshop.takeOrder('mint', 5);\nshop.takeOrder('lemon', 3);\n\nshop.serve();\n\n\u002F\u002F Teapot filled\n\u002F\u002F Teapot filled\n\u002F\u002F Teapot filled\n\u002F\u002F Serving lemon to table #1\n\u002F\u002F Serving milky to table #2\n\u002F\u002F Serving mint to table #5\n\u002F\u002F Serving lemon to table #3\n\n\u002F\u002F note that the Teapot is filled three times but the served four\n"}]}]}]},{type:a,value:c},{type:b,tag:"script",props:{async:f,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fw2zqxhba\u002F1\u002Fembed\u002Fjs\u002F"},children:[]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Fflyweight-pattern",extension:".md",createdAt:D,updatedAt:D}}],fetch:[],mutations:void 0}}("text","element","\n","p",false,true,2,"h2","a","true",-1,"span","icon","icon-link","blockquote","div","nuxt-content-highlight","pre","language-text","line-numbers","code","In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.",2.5,"name-flyweight","Name: Flyweight","type-structural","Type: Structural","use-when-you-want-to","Use when you want to:","2020-12-03T07:39:51.690Z")));