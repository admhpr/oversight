__NUXT_JSONP__("/archive/strategy-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D){return {data:[{page:{slug:"strategy-pattern",title:"The Strategy Pattern",published:f,date:"2019-06-25T01:52",desc:u,taxonomy:{category:["blog"],tag:["design patterns","behavioural"]},feed:{limit:10},twitterenable:f,twittercardoptions:"summary",articleenabled:d,musiceventenabled:d,orgaenabled:d,orga:{ratingValue:v},orgaratingenabled:d,eventenabled:d,personenabled:d,musicalbumenabled:d,productenabled:d,product:{ratingValue:v},restaurantenabled:d,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:f,toc:[{id:w,depth:g,text:x},{id:y,depth:g,text:z},{id:A,depth:g,text:B}],body:{type:"root",children:[{type:b,tag:h,props:{id:w},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#name-strategy",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:h,props:{id:y},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#type-behavioural",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:h,props:{id:A},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#use-when-you-want-to",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Switch the algorithm or strategy based upon the situation."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:u}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Real World Example:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Consider the example of sorting, we implemented bubble sort but the data started to grow and bubble sort started getting very slow. In order to tackle this we implemented Quick sort. But now although the quick sort algorithm was doing better for large datasets, it was very slow for smaller datasets. In order to handle this we implemented a strategy where for small datasets, bubble sort will be used and for larger, quick sort."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Strategies that conform to the interface:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"interface SortStrategy {\n    sort(data: number[]): number[]\n}\n\nclass BubbleSortStrategy implements SortStrategy{\n    sort(data){\n        console.log(\"Sorting using bubble sort\");\n        \u002F\u002F Do sorting\n        return data;\n    }\n}\n\nclass QuickSortStrategy implements SortStrategy{\n    sort(data){\n        console.log(\"Sorting using quick sort\")\n        return data;\n    }\n\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The Sorter:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"class Sorter { \n    protected sorter;\n    constructor(sorter: SortStrategy) { \n        this.sorter = sorter;\n    }\n\n    sort(data): number[] {\n        return this.sorter.sort(data);\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Usage:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"const dataset = [1, 5, 4, 3, 2, 8];\n\nconst bubbleSorter = new Sorter(new BubbleSortStrategy());\n\nbubbleSorter.sort(dataset);\n\nconst quickSorter = new Sorter(new QuickSortStrategy());\n\nquickSorter.sort(dataset);\n"}]}]}]},{type:a,value:c},{type:b,tag:"script",props:{async:f,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fxynw4fzp\u002Fembed\u002Fjs\u002F"},children:[]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Fstrategy-pattern",extension:".md",createdAt:D,updatedAt:D}}],fetch:[],mutations:void 0}}("text","element","\n",false,"p",true,2,"h2","a","true",-1,"span","icon","icon-link","div","nuxt-content-highlight","pre","language-text","line-numbers","code","In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables an algorithm's behavior to be selected at runtime.",2.5,"name-strategy","Name: Strategy","type-behavioural","Type: Behavioural","use-when-you-want-to","Use when you want to:","blockquote","2020-12-03T07:34:51.712Z")));