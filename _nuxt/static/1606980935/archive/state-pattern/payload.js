__NUXT_JSONP__("/archive/state-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E){return {data:[{page:{slug:"state-pattern",title:"The State Pattern",date:"2019-07-04T01:43",desc:"The state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods defined by the pattern's superclass. The state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern's interface.",taxonomy:{category:["blog"],tag:["design patterns","behavioural"]},feed:{limit:10},twitterenable:n,twittercardoptions:"summary",articleenabled:d,musiceventenabled:d,orgaenabled:d,orga:{ratingValue:u},orgaratingenabled:d,eventenabled:d,personenabled:d,musicalbumenabled:d,productenabled:d,product:{ratingValue:u},restaurantenabled:d,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:n,toc:[{id:v,depth:f,text:w},{id:x,depth:f,text:y},{id:z,depth:f,text:A},{id:B,depth:f,text:C}],body:{type:"root",children:[{type:b,tag:g,props:{id:v},children:[{type:b,tag:h,props:{ariaHidden:i,href:"#name-command",tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:w}]},{type:a,value:c},{type:b,tag:g,props:{id:x},children:[{type:b,tag:h,props:{ariaHidden:i,href:"#name-state",tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:g,props:{id:z},children:[{type:b,tag:h,props:{ariaHidden:i,href:"#type-behavioural",tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:g,props:{id:B},children:[{type:b,tag:h,props:{ariaHidden:i,href:"#use-when-you-want-to",tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Change the behavior of a class when the state changes."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:D,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods defined by the pattern's superclass. The state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern's interface.\nReal World Example:"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:D,props:{},children:[{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"An example of the state patterns use case is a text editor, it lets you change the state of text that is being typed, i.e. if you have selected bold, it starts writing in bold, if italic then in italics etc."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"First of all we have our state interface and some state implementations"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"interface WritingState{\n    write(words: string) : void;\n}\n\nclass UpperCase implements WritingState{\n    write(words: string){\n        console.log(words.toUpperCase());\n    }\n}\n\nclass LowerCase implements WritingState{\n    write(words: string){\n        console.log(words.toLowerCase())\n    }\n}\n\nclass DefaultText implements WritingState{\n    write(words: string){\n        console.log(words)\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The Editor:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"class TextEditor{\n    protected state : WritingState;\n\n    constructor(state: WritingState){\n        this.state = state;\n    }\n\n    public setState(state: WritingState){\n        this.state = state;\n    }\n\n    public type(words: string){\n        this.state.write(words);\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Usage:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"const editor = new TextEditor(new DefaultText());\n\neditor.type('First line');\n\neditor.setState(new UpperCase());\n\neditor.type('Second line');\neditor.type('Third line');\n\neditor.setState(new LowerCase());\n\neditor.type('Fourth line');\n\n\u002F\u002F Output:\n\u002F\u002F First line\n\u002F\u002F SECOND LINE\n\u002F\u002F THIRD LINE\n\u002F\u002F fourth line\n\u002F\u002F fifth line\n"}]}]}]},{type:a,value:c},{type:b,tag:"script",props:{async:n,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fqphyzjva\u002F1\u002Fembed\u002Fjs\u002F"},children:[]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Fstate-pattern",extension:".md",createdAt:E,updatedAt:E}}],fetch:[],mutations:void 0}}("text","element","\n",false,"p",2,"h2","a","true",-1,"span","icon","icon-link",true,"div","nuxt-content-highlight","pre","language-text","line-numbers","code",2.5,"name-command","Name: Command","name-state","Name: State","type-behavioural","Type: Behavioural","use-when-you-want-to","Use when you want to:","blockquote","2020-12-03T07:34:51.712Z")));