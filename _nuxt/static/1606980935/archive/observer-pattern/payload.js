__NUXT_JSONP__("/archive/observer-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D){return {data:[{page:{slug:"observer-pattern",title:"The Observer Pattern",published:f,desc:u,date:"2019-05-17T09:05",taxonomy:{category:["blog"],tag:["design patterns","behavioural"]},external_links:{process:d},twitterenable:f,twittercardoptions:"summary",articleenabled:d,musiceventenabled:d,orgaenabled:d,orga:{ratingValue:v},orgaratingenabled:d,eventenabled:d,personenabled:d,musicalbumenabled:d,productenabled:d,product:{ratingValue:v},restaurantenabled:d,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:f,toc:[{id:w,depth:g,text:x},{id:y,depth:g,text:z},{id:A,depth:g,text:B}],body:{type:"root",children:[{type:b,tag:h,props:{id:w},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#name-observer",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"(Otherwise known as \"pub-sub\")"}]},{type:a,value:c},{type:b,tag:h,props:{id:y},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#type-behavioural",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:h,props:{id:A},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#use-when-you-want-to",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Define a dependency between objects so that whenever an object changes its state, all its dependents are notified."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:u}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Real World Example:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"A good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a matching job opportunity."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Job seekers that need to be notified for a job posting:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"class JobPost {\n    constructor(protected title: string) { }\n\n    public getTitle() {\n        return this.title;\n    }\n}\nclass JobSeeker {\n    constructor(protected name: string) { }\n\n    public notify(job: JobPost) {\n        \u002F\u002F Do something with the job posting\n        console.log('Hi ' + this.name + '! New job posted: ' + job.getTitle();\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Job postings to which the job seekers will subscribe:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"class JobBoard {\n    private subscribers = []\n    subscribe(jobSeeker) {\n        this.subscribers.push(jobSeeker)\n    }\n    addJob(jobPosting) {\n        this.subscribers.forEach(subscriber =\u003E {\n            subscriber.notify(jobPosting)\n        })\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Usage:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,s]},children:[{type:b,tag:t,props:{},children:[{type:a,value:"\u002F\u002F Create subscribers\nconst jonDoe = new JobSeeker('John Doe')\nconst janeDoe = new JobSeeker('Jane Doe')\nconst kaneDoe = new JobSeeker('Kane Doe')\n\n\u002F\u002F Create publisher and attach subscribers\nconst jobBoard = new JobBoard()\njobBoard.subscribe(jonDoe)\njobBoard.subscribe(janeDoe)\n\n\u002F\u002F Add a new job and see if subscribers get notified\njobBoard.addJob(new JobPost('Software Engineer'))\n\n\u002F\u002F Output\n\u002F\u002F John Doe has been notified of a new posting : Software Engineer\n\u002F\u002F Jane Doe has been notified of a new posting : Software Engineer\n"}]}]}]},{type:a,value:c},{type:b,tag:"script",props:{async:f,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002F1barv6dy\u002F1\u002Fembed\u002Fjs\u002F"},children:[]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Fobserver-pattern",extension:".md",createdAt:D,updatedAt:D}}],fetch:[],mutations:void 0}}("text","element","\n",false,"p",true,2,"h2","a","true",-1,"span","icon","icon-link","div","nuxt-content-highlight","pre","language-text","line-numbers","code","The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.",2.5,"name-observer","Name: Observer","type-behavioural","Type: Behavioural","use-when-you-want-to","Use when you want to:","blockquote","2020-12-03T07:34:51.712Z")));