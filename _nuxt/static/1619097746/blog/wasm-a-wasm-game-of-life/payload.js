__NUXT_JSONP__("/blog/wasm-a-wasm-game-of-life", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){return {data:[{post:{slug:"wasm-a-wasm-game-of-life",title:"a wasm way of life",date:"2021-03-29T05:02",desc:"coways game of life in wasm",tags:["wasm","rust"],toc:[{id:l,depth:m,text:n},{id:o,depth:m,text:p}],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:a,value:"After a number of weeks getting to grips with the basics of Rust and some of the syntax I'm going to explore how we can use Rust code with JavaScript via Web Assembly."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FConway%27s_Game_of_Life",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"Wikipedia gives a great description of the rules of Conway's Game of Life"}]},{type:a,value:":"}]},{type:a,value:c},{type:b,tag:"blockquote",props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, alive or dead,\nor \"populated\" or \"unpopulated\". Every cell interacts with its eight neighbours, which are the cells that are horizontally,\nvertically, or diagonally adjacent. At each step in time, the following transitions occur:"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Any live cell with fewer than two live neighbours dies, as if caused by underpopulation."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Any live cell with two or three live neighbours lives on to the next generation."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Any live cell with more than three live neighbours dies, as if by overpopulation."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction."}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules simultaneously to every cell in the seedâ€”births and deaths occur simultaneously, and the discrete moment at which this happens is sometimes called a tick (in other words, each generation is a pure function of the preceding one). The rules continue to be applied repeatedly to create further generations."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Consider the following initial universe:"}]},{type:a,value:c},{type:b,tag:q,props:{id:l},children:[{type:b,tag:e,props:{href:"#initial-universe",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:n}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We can calculate the next generation by considering each cell. The top left cell is dead. Rule (4) is the only transition rule that applies to dead cells. However, because the top left cell does not have exactly three live neighbors, the transition rule does not apply, and it remains dead in the next generation. The same goes for every other cell in the first row as well."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Things get interesting when we consider the top live cell, in the second row, third column. For live cells, any of the first three rules potentially applies. In this cell's case, it has only one live neighbor, and therefore rule (1) applies: this cell will die in the next generation. The same fate awaits the bottom live cell."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The middle live cell has two live neighbors: the top and bottom live cells. This means that rule (2) applies, and it remains live in the next generation."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The final interesting cases are the dead cells just to the left and right of the middle live cell. The three live cells are all neighbors both of these cells, which means that rule (4) applies, and these cells will become alive in the next generation."}]},{type:a,value:c},{type:b,tag:q,props:{id:o},children:[{type:b,tag:e,props:{href:"#design",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Before we dive in, we have some design choices to consider."}]},{type:a,value:c},{type:b,tag:"h4",props:{id:"infinite-universe"},children:[{type:b,tag:e,props:{href:"#infinite-universe",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"Infinite Universe"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The Game of Life is played in an infinite universe, but we do not have infinite memory and compute power. Working around this rather annoying limitation usually comes in one of three flavors:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Keep track of which subset of the universe has interesting things happening, and expand this region as needed. In the worst case, this expansion is unbounded and the implementation will get slower and slower and eventually run out of memory."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Create a fixed-size universe, where cells on the edges have fewer neighbors than cells in the middle. The downside with this approach is that infinite patterns, like gliders, that reach the end of the universe are snuffed out."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Create a fixed-size, periodic universe, where cells on the edges have neighbors that wrap around to the other side of the universe. Because neighbors wrap around the edges of the universe, gliders can keep running forever."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We will implement the third option."}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002Fwasm-a-wasm-game-of-life",extension:".md",createdAt:r,updatedAt:r}}],fetch:[],mutations:void 0}}("text","element","\n","p","a","li","true",-1,"span","icon","icon-link","initial-universe",3,"Initial Universe","design","Design","h3","2021-04-22T13:21:41.024Z")));