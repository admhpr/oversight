__NUXT_JSONP__("/blog/stratified-design", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y){return {data:[{post:{slug:"stratified-design",title:"stratified design",date:"2022-05-06T06:01",desc:"ideas on stratified design ðŸ¥®",tags:["recipes","meta"],toc:[{id:m,depth:d,text:n},{id:o,depth:d,text:p},{id:q,depth:d,text:r},{id:s,depth:d,text:t},{id:u,depth:d,text:v},{id:w,depth:d,text:x}],body:{type:"root",children:[{type:a,tag:e,props:{id:m},children:[{type:a,tag:f,props:{ariaHidden:g,href:"#straightforward-implementation",tabIndex:h},children:[{type:a,tag:i,props:{className:[j,k]},children:[]}]},{type:b,value:n}]},{type:b,value:c},{type:a,tag:l,props:{},children:[{type:b,value:"The layer structure of stratified design should help us build straightforward implementations. When we read a function with a straightforward implementation, the problem the function signature presents should be solved at the right level of detail in the body. Too much detail is a code smell."}]},{type:b,value:c},{type:a,tag:e,props:{id:o},children:[{type:a,tag:f,props:{ariaHidden:g,href:"#abstraction-barrier",tabIndex:h},children:[{type:a,tag:i,props:{className:[j,k]},children:[]}]},{type:b,value:p}]},{type:b,value:c},{type:a,tag:l,props:{},children:[{type:b,value:"Some layers in the graph provide an interface that lets us hide an important implementation detail. These layers help us write code at a higher level and free our limited mental capacity to think at a\nhigher level."}]},{type:b,value:c},{type:a,tag:e,props:{id:q},children:[{type:a,tag:f,props:{ariaHidden:g,href:"#minimal-interface",tabIndex:h},children:[{type:a,tag:i,props:{className:[j,k]},children:[]}]},{type:b,value:r}]},{type:b,value:c},{type:a,tag:l,props:{},children:[{type:b,value:"As our system evolves, we want the interfaces to important business concepts to converge to a small, powerful set of operations.\nEvery other operation should be defined in terms of those, either directly or indirectly."}]},{type:b,value:c},{type:a,tag:e,props:{id:s},children:[{type:a,tag:f,props:{ariaHidden:g,href:"#comfortable-layers",tabIndex:h},children:[{type:a,tag:i,props:{className:[j,k]},children:[]}]},{type:b,value:t}]},{type:b,value:c},{type:a,tag:l,props:{},children:[{type:b,value:"The patterns and practices of stratified design should serve our needs as programmers, who are in turn serving the business. We\nshould invest time in the layers that will help us deliver software faster and with higher quality. We donâ€™t want to add layers for sport. The code and its layers of abstraction should feel comfort-\nable to work in."}]},{type:b,value:c},{type:a,tag:e,props:{id:u},children:[{type:a,tag:f,props:{ariaHidden:g,href:"#straightforward-code-solves-a-problem-at-a-single-level-of-detail",tabIndex:h},children:[{type:a,tag:i,props:{className:[j,k]},children:[]}]},{type:b,value:v}]},{type:b,value:c},{type:a,tag:l,props:{},children:[{type:b,value:"If we code without regard to design, we often have code that is hard to read and modify. But why is it so hard? Most often, the code is hard to read because you have to understand it at different levels of detail. There is a lot to understand to read the function. Straightforward implementations try to narrow the levels of detail you need to understand in order to read the code."}]},{type:b,value:c},{type:a,tag:e,props:{id:w},children:[{type:a,tag:f,props:{ariaHidden:g,href:"#stratified-design-helps-us-target-a-specific-level-of-detail",tabIndex:h},children:[{type:a,tag:i,props:{className:[j,k]},children:[]}]},{type:b,value:x}]},{type:b,value:c},{type:a,tag:l,props:{},children:[{type:b,value:"While itâ€™s not an easy formula, we can train our sense of design to look out for these levels of detail with a variety of clues in the code. We can then make appropriate changes. The call graph gives us a rich source of clues about levels of detail. The code itself gives us a lot of clues, but thereâ€™s often too much to read at once to get a big picture view. A call graph can show us how many functions are defined in terms of each other. As we\ndraw the graph, we can place functions at layers that correspond to their level of detail. Using the function signature, body, and call graph, we have a lot of information to help us write straight-forward code."}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002Fstratified-design",extension:".md",createdAt:y,updatedAt:y}}],fetch:{},mutations:void 0}}("element","text","\n",3,"h3","a","true",-1,"span","icon","icon-link","p","straightforward-implementation","Straightforward implementation","abstraction-barrier","Abstraction barrier","minimal-interface","Minimal interface","comfortable-layers","Comfortable layers","straightforward-code-solves-a-problem-at-a-single-level-of-detail","Straightforward code solves a problem at a single level of detail","stratified-design-helps-us-target-a-specific-level-of-detail","Stratified design helps us target a specific level of detail","2023-10-06T15:17:04.694Z")));