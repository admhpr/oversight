__NUXT_JSONP__("/blog", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct,cu,cv,cw,cx,cy,cz,cA,cB,cC,cD,cE,cF,cG,cH,cI,cJ,cK,cL,cM,cN,cO,cP,cQ,cR,cS,cT,cU,cV,cW,cX,cY,cZ,c_,c$,da,db,dc,dd,de,df,dg,dh,di,dj,dk,dl,dm,dn,do0,dp,dq,dr,ds,dt,du,dv,dw,dx,dy,dz,dA,dB,dC,dD,dE,dF,dG,dH,dI,dJ,dK,dL,dM,dN,dO,dP,dQ,dR,dS,dT,dU,dV,dW,dX,dY,dZ,d_,d$,ea,eb,ec,ed,ee,ef,eg,eh,ei,ej,ek,el,em,en,eo,ep,eq,er,es,et,eu,ev,ew,ex,ey,ez,eA,eB,eC,eD,eE,eF,eG,eH,eI,eJ,eK,eL,eM,eN,eO,eP,eQ,eR,eS,eT,eU,eV,eW,eX,eY,eZ,e_,e$,fa,fb,fc,fd,fe,ff,fg,fh,fi,fj,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,fA,fB,fC,fD,fE,fF,fG,fH,fI,fJ,fK,fL,fM,fN,fO,fP,fQ,fR,fS,fT,fU,fV,fW,fX,fY,fZ,f_,f$,ga,gb,gc,gd,ge,gf,gg,gh,gi,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt){return {data:[{posts:[{slug:"lists-list-more-lists",title:cG,date:"2021-12-13T06:52",desc:cH,tags:[aK,"data structures"],toc:[{id:cI,depth:aL,text:cJ},{id:cK,depth:Q,text:cL},{id:cM,depth:Q,text:cN},{id:cO,depth:Q,text:cP},{id:cQ,depth:aL,text:cR},{id:cS,depth:aL,text:cT}],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:cH}]},{type:a,value:f},{type:b,tag:aM,props:{id:cI},children:[{type:b,tag:x,props:{href:"#linked-lists",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:cJ}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bX},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FLinked_list#Singly_linked_list",rel:[Z,_,$],target:aa},children:[{type:a,value:cG}]},{type:a,value:" stores entries in sequence pointing to next item in the chain. When there is the no next item the pointer points to some form of nothing, such as "},{type:b,tag:h,props:{},children:[{type:a,value:"nil\u002Fnull\u002FNone"}]},{type:a,value:" etc."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[ag,B]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"+--------+  +-------+  +-------+  +-------+\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" LENGTH "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:cU},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:cU},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" HEAD   +--"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"    +-------+\n+--------+  +---------"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:cV},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:cW},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:"+ NULL  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" TAIL   "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:bY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:bY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:bY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"    +-------+\n+--------+  +-------+  +-------+  +-------+\n         +------------------------------^\n\n"}]}]}]},{type:a,value:f},{type:b,tag:R,props:{id:cK},children:[{type:b,tag:x,props:{href:"#example",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:cL}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"A potential use case for a singly linked list would be a "},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FTransaction_log",rel:[Z,_,$],target:aa},children:[{type:a,value:"transaction log"}]},{type:a,value:", this an append only list where commands ( such as a SQL statement ) are added to a list before being written to persistent storage."}]},{type:a,value:f},{type:b,tag:R,props:{id:cM},children:[{type:b,tag:x,props:{href:"#pros",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:cN}]},{type:a,value:f},{type:b,tag:R,props:{id:cO},children:[{type:b,tag:x,props:{href:"#cons",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:cP}]},{type:a,value:f},{type:b,tag:aM,props:{id:cQ},children:[{type:b,tag:x,props:{href:"#doubly-linked-lists",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:cR}]},{type:a,value:f},{type:b,tag:aM,props:{id:cS},children:[{type:b,tag:x,props:{href:"#skip-lists",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:cT}]}]},dir:aF,path:"\u002Fblog\u002Flists-list-more-lists",extension:aG,createdAt:am,updatedAt:am},{slug:"rust-control-flow",title:"control flow in rust",date:"2020-12-27T06:11",desc:bp,tags:[aK],toc:[{id:cX,depth:Q,text:cY},{id:cZ,depth:Q,text:c_},{id:c$,depth:Q,text:da},{id:db,depth:Q,text:dc},{id:dd,depth:Q,text:de},{id:df,depth:Q,text:dg},{id:dh,depth:Q,text:di}],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:"Deciding what piece of code to run based on a whether a condition is met or not is the essence of control flow in code. The most common of which in most languages (including Rust) are "},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:" expressions and "},{type:b,tag:h,props:{},children:[{type:a,value:"loops"}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:R,props:{id:cX},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#if-expressions",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:cY}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"An "},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:" expression allows you to branch your code depending on conditions. You provide a condition and then state, “If this condition is met, run this block of code. If the condition is not met, do not run this block of code.”"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:au}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aS}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"condition was true\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aN}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"condition was false\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The above snippet is pretty self explanatory, if the number is less than "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" it prints \"condition was true\" and if the number is greater than 5 it \"condition was false\"."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Optionally, we can also include an "},{type:b,tag:h,props:{},children:[{type:a,value:aN}]},{type:a,value:" expression, which we chose to do here, to give the program an alternative block of code to execute should the condition evaluate to false. If you don’t provide an else expression and the condition is false, the program will just skip the if block and move on to the next bit of code."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Note that the expression being checked in the "},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:" expression must be of type "},{type:b,tag:h,props:{},children:[{type:a,value:dj}]},{type:a,value:". Rust will not automatically try to convert non-Boolean types to a Boolean."}]},{type:a,value:f},{type:b,tag:R,props:{id:cZ},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#handling-multiple-conditions-with-else-if",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:c_}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You can have multiple conditions by combining "},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:aO},{type:b,tag:h,props:{},children:[{type:a,value:aN}]},{type:a,value:" in an "},{type:b,tag:h,props:{},children:[{type:a,value:"else if"}]},{type:a,value:" expression. For example:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:au}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bE}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"number is divisible by 4\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aN}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:au}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bE}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"number is divisible by 3\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aN}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:au}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bE}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"number is divisible by 2\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aN}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"number is not divisible by 4, 3, or 2\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:R,props:{id:c$},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#using-if-in-a-let-statement",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:da}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Because if is an expression, we can use it on the right side of a "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" statement."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:dk},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bq]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:au}]},{type:a,value:dk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aN}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"The value of number is: {}\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bZ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The value options provided in the "},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:" expression must be of the same type, or the compiler will throw an error. Rust needs to know at compile time what type the number variable is and cannot do that if the value of "},{type:b,tag:h,props:{},children:[{type:a,value:o}]},{type:a,value:" is determined at runtime."}]},{type:a,value:f},{type:b,tag:R,props:{id:db},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#repetition-with-loops",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dc}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"It’s often useful to execute a block of code more than once. For this task, Rust provides several loops. A loop runs through the code inside the loop body to the end and then starts immediately back at the beginning."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust has three kinds of loops: "},{type:b,tag:h,props:{},children:[{type:a,value:ba}]},{type:a,value:aT},{type:b,tag:h,props:{},children:[{type:a,value:br}]},{type:a,value:bG},{type:b,tag:h,props:{},children:[{type:a,value:bs}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:dl,props:{id:"repeating-code-with-loop"},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#repeating-code-with-loop",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:"Repeating Code with loop"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bt},{type:b,tag:h,props:{},children:[{type:a,value:ba}]},{type:a,value:" keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ba}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"again!\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When we run this program, we’ll see "},{type:b,tag:h,props:{},children:[{type:a,value:"again!"}]},{type:a,value:" printed over and over continuously until we stop the program manually (using "},{type:b,tag:h,props:{},children:[{type:a,value:"ctrl-c"}]},{type:a,value:" to interrupt at the terminal)."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Fortunately, Rust provides another, more reliable way to break out of a loop. You can place the "},{type:b,tag:h,props:{},children:[{type:a,value:bb}]},{type:a,value:" keyword within the loop to tell the program when to stop executing the loop."}]},{type:a,value:f},{type:b,tag:R,props:{id:dd},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#returning-values-from-loops",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:de}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:dm},{type:b,tag:h,props:{},children:[{type:a,value:bb}]},{type:a,value:", stopping the loop."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aC}]},{type:a,value:b_},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" result "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ba}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:"\n        counter "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:dn}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:b$},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:au}]},{type:a,value:b_},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aX}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:"\n            "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bb}]},{type:a,value:b_},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bc}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"The result is {}\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" result"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Before the loop, we declare a variable named counter and initialize it to "},{type:b,tag:h,props:{},children:[{type:a,value:aB}]},{type:a,value:". Then we declare a variable named "},{type:b,tag:h,props:{},children:[{type:a,value:do0}]},{type:a,value:" to hold the value returned from the loop. On every iteration of the loop, we add "},{type:b,tag:h,props:{},children:[{type:a,value:ak}]},{type:a,value:" to the counter variable, and then check whether the counter is equal to "},{type:b,tag:h,props:{},children:[{type:a,value:aX}]},{type:a,value:". When it is, we use the break keyword with the value "},{type:b,tag:h,props:{},children:[{type:a,value:"counter * 2"}]},{type:a,value:". After the loop, we use a semicolon to end the statement that assigns the value to result. Finally, we print the value in "},{type:b,tag:h,props:{},children:[{type:a,value:do0}]},{type:a,value:", which in this case is 20."}]},{type:a,value:f},{type:b,tag:R,props:{id:df},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#conditional-loops-with-while",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dg}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:dm},{type:b,tag:h,props:{},children:[{type:a,value:bb}]},{type:a,value:", stopping the loop. This loop type could be implemented using a combination of "},{type:b,tag:h,props:{},children:[{type:a,value:ba}]},{type:a,value:aT},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:aT},{type:b,tag:h,props:{},children:[{type:a,value:aN}]},{type:a,value:bG},{type:b,tag:h,props:{},children:[{type:a,value:bb}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"However, this pattern is so common that Rust has a built-in language construct for it, called a "},{type:b,tag:h,props:{},children:[{type:a,value:br}]},{type:a,value:" loop."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aC}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:br}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"!="}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dp}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bZ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n\n        number "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"-="}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:dr},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This construct eliminates a lot of nesting that would be necessary if you used "},{type:b,tag:h,props:{},children:[{type:a,value:ba}]},{type:a,value:aT},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:aT},{type:b,tag:h,props:{},children:[{type:a,value:aN}]},{type:a,value:bG},{type:b,tag:h,props:{},children:[{type:a,value:bb}]},{type:a,value:", and it’s clearer. While a condition holds true, the code runs; otherwise, it exits the loop."}]},{type:a,value:f},{type:b,tag:R,props:{id:dh},children:[{type:b,tag:x,props:{ariaHidden:G,href:"#looping-through-a-collection-with-for",tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:di}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You could use the "},{type:b,tag:h,props:{},children:[{type:a,value:br}]},{type:a,value:" construct to loop over the elements of a collection, such as an array."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aX}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ds}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ca}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:dt}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:du}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aC}]},{type:a,value:cb},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:br}]},{type:a,value:cb},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aS}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dv}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:cc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n\n        index "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:dn}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here, the code counts up through the elements in the array. It starts at index "},{type:b,tag:h,props:{},children:[{type:a,value:aB}]},{type:a,value:", and then loops until it reaches the final index in the array (that is, when "},{type:b,tag:h,props:{},children:[{type:a,value:"index \u003C 5"}]},{type:a,value:" is no longer true)."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This approach is error prone; we could cause the program to panic if the index length is incorrect. It’s also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"As a more concise alternative, you can use a "},{type:b,tag:h,props:{},children:[{type:a,value:bs}]},{type:a,value:" loop and execute some code for each item in a collection."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aX}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ds}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ca}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:dt}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:du}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bs}]},{type:a,value:cd},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bH}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"iter"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dv}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:dw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The safety and conciseness of for loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a while loop."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here’s what the countdown would look like using a "},{type:b,tag:h,props:{},children:[{type:a,value:bs}]},{type:a,value:" loop and "},{type:b,tag:h,props:{},children:[{type:a,value:dx}]},{type:a,value:", to reverse the range:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bs}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bH}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:".."}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:dx}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dp}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bZ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:dr},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:f}]}]}]}]},dir:aF,path:"\u002Fblog\u002Frust-control-flow",extension:aG,createdAt:am,updatedAt:am},{slug:"rust-data-types",title:"data types in rust",date:"2020-12-15T06:02",desc:bp,tags:[aK],toc:[{id:dy,depth:aL,text:dz},{id:dA,depth:aL,text:dB},{id:dC,depth:Q,text:dD},{id:dE,depth:Q,text:dF},{id:dG,depth:Q,text:dH},{id:dI,depth:Q,text:dJ},{id:bq,depth:Q,text:dK},{id:dL,depth:Q,text:dM},{id:dN,depth:aL,text:dO},{id:dP,depth:Q,text:dQ},{id:dR,depth:Q,text:dS},{id:dT,depth:Q,text:dU},{id:dV,depth:Q,text:dW}],body:{type:aD,children:[{type:b,tag:aM,props:{id:dy},children:[{type:b,tag:x,props:{href:"#data-types",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dz}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Every value in Rust has a data type. This piece of additional information let's Rust know how to work with the data."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust is "},{type:b,tag:x,props:{href:"https:\u002F\u002Fwww.techopedia.com\u002Fdefinition\u002F22321\u002Fstatically-typed",rel:[Z,_,$],target:aa},children:[{type:a,value:"statically typed"}]},{type:a,value:", meaning that it must know all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Sometimes there are cases where the value can be parsed from a say a string to a number and therefore there could be potentially a number of types associated with that value. In those cases type annotation is important."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" meaning_of_life"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:dX}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dY}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"parse"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"expect"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Without type annotation Rust will display the following:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"$ cargo build\n   Compiling no_type_annotations v0.1.0 "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"file:\u002F\u002F\u002Fprojects\u002Fno_type_annotations"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:"E0282"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:": "},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:ce}]},{type:a,value:" annotations needed\n --"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" src\u002Fmain.rs:2:9\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:a,value:" meaning_of_life "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dY}]},{type:a,value:".parse"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:".expect"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:dZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"         ^^^^^ consider giving "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"meaning_of_life"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:ce}]},{type:a,value:d_},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bv}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"rustc --explain E0282"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"no_type_annotations"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:bf}]},{type:a,value:d$}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here, the compiler is letting us know it needs more information on the intended data type of the parsed string."}]},{type:a,value:f},{type:b,tag:aM,props:{id:dA},children:[{type:b,tag:x,props:{href:"#scalar-types",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dB}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bX},{type:b,tag:x,props:{href:"https:\u002F\u002Fwww.techopedia.com\u002Fdefinition\u002F16441\u002Fscalar",rel:[Z,_,$],target:aa},children:[{type:a,value:"scalar"}]},{type:a,value:" type represents a single value. Rust has four primary scalar types:"}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"integars"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"floating-point numbers"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Booleans"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"characters"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"These are pretty common across programming languages, here is a quick refresher:"}]},{type:a,value:f},{type:b,tag:R,props:{id:dC},children:[{type:b,tag:x,props:{href:"#integer",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dD}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"An integer is a number without a fractional component. The table below shows the built-in integer types in Rust. Each variant in the "},{type:b,tag:x,props:{href:"https:\u002F\u002Fwww.ibm.com\u002Fsupport\u002Fknowledgecenter\u002Fssw_aix_72\u002Fcommprogramming\u002Fint_dat_typ.html",rel:[Z,_,$],target:aa},children:[{type:a,value:"Signed and Unsigned"}]},{type:a,value:" columns (for example, i16) can be used to declare the type of an integer value. Below are examples of integer types in Rust."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:ea},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" signed "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" unsigned "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:eb},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:eb},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:cV},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ec}]},{type:a,value:"-bit  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" i8     "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" u8       "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"16"}]},{type:a,value:cf},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" i16    "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" u16      "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"32"}]},{type:a,value:cf},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" i32    "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" u32      "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"64"}]},{type:a,value:cf},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" i64    "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" u128     "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" arch   "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" isize  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" usize    "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The isize and usize types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture"}]},{type:a,value:f},{type:b,tag:R,props:{id:dE},children:[{type:b,tag:x,props:{href:"#integer-literals",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dF}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You can write integers in any of the forms outlined below"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" number literals "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" example    "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"-----------------"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:cW},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" decimal         "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" 78_678     "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" hex             "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" 0xff       "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" octal           "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" 0o77       "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" binary          "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" 0b1111_0000"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" byte "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"u8 only"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" b"},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"'A'"}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust defaults integers to "},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:" (which will cover the majority of cases), this type is generally the fastest, even on 64-bit systems. The primary situation in which you’d use "},{type:b,tag:h,props:{},children:[{type:a,value:"isize"}]},{type:a,value:bI},{type:b,tag:h,props:{},children:[{type:a,value:cg}]},{type:a,value:" is when indexing some sort of collection."}]},{type:a,value:f},{type:b,tag:R,props:{id:dG},children:[{type:b,tag:x,props:{href:"#floating-point-types",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dH}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust also has two primitive types for floating-point numbers, which are numbers with decimal points. Rust’s floating-point types are "},{type:b,tag:h,props:{},children:[{type:a,value:ch}]},{type:a,value:aO},{type:b,tag:h,props:{},children:[{type:a,value:ci}]},{type:a,value:", which are 32 bits and 64 bits in size, respectively. The default type is f64 because on modern CPUs it’s roughly the same speed as "},{type:b,tag:h,props:{},children:[{type:a,value:ch}]},{type:a,value:" but is capable of more precision."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here’s an example that shows floating-point numbers in action:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"2.0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F f64"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ch}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"3.0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F f32"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Floating-point numbers are represented according to the "},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FIEEE_754",rel:[Z,_,$],target:aa},children:[{type:a,value:"IEEE-754 standard"}]},{type:a,value:". The f32 type is a single-precision float, and f64 has double precision."}]},{type:a,value:f},{type:b,tag:R,props:{id:dI},children:[{type:b,tag:x,props:{href:"#numeric-operations",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dJ}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust supports the basic mathematical operations you’d expect for all of the number types: addition, subtraction, multiplication, division, and remainder. The following code shows how you’d use each one in a let statement:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F addition"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" sum "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:by}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aX}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F subtraction"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" difference "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"95.5"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"-"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"4.3"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F multiplication"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" product "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bc}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ca}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F division"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" quotient "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"56.7"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\u002F"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"32.2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F remainder"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" remainder "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"43"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bE}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Each expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. See "},{type:b,tag:x,props:{href:"https:\u002F\u002Fdoc.rust-lang.org\u002Fstable\u002Fbook\u002Fappendix-02-operators.html",rel:[Z,_,$],target:aa},children:[{type:a,value:"here"}]},{type:a,value:" for a full list of operators."}]},{type:a,value:f},{type:b,tag:R,props:{id:bq},children:[{type:b,tag:x,props:{href:"#boolean",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dK}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"As in most other programming languages, a Boolean type in Rust has two possible values: true and false. Booleans are one byte in size. The Boolean type in Rust is specified using bool. For example:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" t "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bq]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" f"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:dj}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bq]},children:[{type:a,value:"false"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F with explicit type annotation"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Boolean types are typically used in control flows such as "},{type:b,tag:h,props:{},children:[{type:a,value:au}]},{type:a,value:" statements."}]},{type:a,value:f},{type:b,tag:R,props:{id:dL},children:[{type:b,tag:x,props:{href:"#character-type",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dM}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust’s "},{type:b,tag:h,props:{},children:[{type:a,value:bJ}]},{type:a,value:" type is the language’s most primitive alphabetic type, and the following code shows one way to use it. (Note that char literals are specified with single quotes, as opposed to string literals, which use double quotes.)"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" c "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bJ,s]},children:[{type:a,value:"'z'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" z "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bJ,s]},children:[{type:a,value:"'ℤ'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" heart_eyed_cat "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:" '😻'"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Ru jst’s "},{type:b,tag:h,props:{},children:[{type:a,value:bJ}]},{type:a,value:" type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust. Unicode Scalar Values range from "},{type:b,tag:h,props:{},children:[{type:a,value:"U+0000"}]},{type:a,value:bK},{type:b,tag:h,props:{},children:[{type:a,value:"U+D7FF"}]},{type:a,value:aO},{type:b,tag:h,props:{},children:[{type:a,value:"U+E000"}]},{type:a,value:bK},{type:b,tag:h,props:{},children:[{type:a,value:"U+10FFFF"}]},{type:a,value:" inclusive. However, a “character” isn’t really a concept in Unicode, so your human intuition for what a “character” is may not match up with what a char is in Rust."}]},{type:a,value:f},{type:b,tag:aM,props:{id:dN},children:[{type:b,tag:x,props:{href:"#compound-types",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dO}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays."}]},{type:a,value:f},{type:b,tag:R,props:{id:dP},children:[{type:b,tag:x,props:{href:"#tuple-type",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dQ}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same. We’ve added optional type annotations in this example:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:ed},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ci}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ee}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The variable tup binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" tup "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" z"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:ed},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ck}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"output:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"The value of y is: "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bL}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This program first creates a tuple and binds it to the variable "},{type:b,tag:h,props:{},children:[{type:a,value:"tup"}]},{type:a,value:". It then uses a pattern with let to take tup and turn it into three separate variables, "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:aT},{type:b,tag:h,props:{},children:[{type:a,value:bM}]},{type:a,value:bG},{type:b,tag:h,props:{},children:[{type:a,value:"z"}]},{type:a,value:". This is called "},{type:b,tag:aU,props:{},children:[{type:a,value:"destructuring"}]},{type:a,value:", because it breaks the single tuple into three parts. Finally, the program prints the value of y, which is 6.4."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In addition to destructuring through pattern matching, we can access a tuple element directly by using a period (.) followed by the index of the value we want to access. For example:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ci}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ee}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" five_hundred "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:".0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" six_point_four "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:".1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" one "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:".2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This program creates a tuple, "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:", and then makes new variables for each element by using their respective indices. As with most programming languages, the first index in a tuple is 0."}]},{type:a,value:f},{type:b,tag:R,props:{id:dR},children:[{type:b,tag:x,props:{href:"#array-type",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dS}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Another way to collect values is an array. Every element in an array must be of the same type (unlike a tuple)."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Arrays in Rust are different from arrays in other languages because arrays have a fixed length, like tuples."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Values going into an array are written as a comma-separated list inside square brackets:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Arrays are useful when data is to stored on the stack rather than the heap ("},{type:b,tag:x,props:{href:"https:\u002F\u002Fmedium.com\u002F@nickolasteixeira\u002Fstack-vs-heap-whats-the-difference-and-why-should-i-care-5abc78da1a88",rel:[Z,_,$],target:aa},children:[{type:a,value:"more on stack and heap"}]},{type:a,value:") or when you want to ensure you always have a fixed number of elements.  An array isn’t as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you’re unsure whether to use an array or a vector, you should probably use a vector. I will look at vectors in a future post."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It’s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 elements:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" months "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ef}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eg}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eh}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ei}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ej}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ek}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:el}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:em},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:en}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eo}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ep}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:er}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You would write an array’s type by using square brackets, and within the brackets include the type of each element, a semicolon, and then the number of elements in the array, like so:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" months"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:cl}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:cm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ef}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eg}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eh}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ei}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ej}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ek}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:el}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:em},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:en}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eo}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ep}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:eq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:er}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Writing an array’s type this way looks similar to an alternative syntax for initializing an array: if you want to create an array that contains the same value for each element, you can specify the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The array named "},{type:b,tag:h,props:{},children:[{type:a,value:x}]},{type:a,value:" will contain "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" elements that will all be set to the value "},{type:b,tag:h,props:{},children:[{type:a,value:ao}]},{type:a,value:" initially. This is the same as writing "},{type:b,tag:h,props:{},children:[{type:a,value:"let a = [3, 3, 3, 3, 3];"}]},{type:a,value:" but in a more concise way."}]},{type:a,value:f},{type:b,tag:R,props:{id:dT},children:[{type:b,tag:x,props:{href:"#accessing-array-elements",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dU}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"An array is a single chunk of memory allocated on the stack. You can access elements of an array using indexing, like this:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" first "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" second "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In this example, the variable named "},{type:b,tag:h,props:{},children:[{type:a,value:"first"}]},{type:a,value:" will get the value "},{type:b,tag:h,props:{},children:[{type:a,value:ak}]},{type:a,value:", because that is the value at index "},{type:b,tag:h,props:{},children:[{type:a,value:"[0]"}]},{type:a,value:" in the array. The variable named second will get the value "},{type:b,tag:h,props:{},children:[{type:a,value:ar}]},{type:a,value:" from index "},{type:b,tag:h,props:{},children:[{type:a,value:"[1]"}]},{type:a,value:" in the array."}]},{type:a,value:f},{type:b,tag:R,props:{id:dV},children:[{type:b,tag:x,props:{href:"#invalid-array-element-access",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:dW}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"What happens if you try to access an element of an array that is past the end of the array? Say you change the example to the following code, which will compile but exit with an error when it runs:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:cb},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aX}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:cd},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:cc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"The value of element is: {}\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:dw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Running this code using "},{type:b,tag:h,props:{},children:[{type:a,value:"cargo run"}]},{type:a,value:" produces the following result:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"$ cargo run\n   Compiling arrays v0.1.0 "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"file:\u002F\u002F\u002Fprojects\u002Farrays"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\nerror: this operation will panic at runtime\n --"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" src\u002Fmain.rs:5:19\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:a,value:cd},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:cc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"                   ^^^^^^^^ index out of bounds: the len is "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" but the index is "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aX}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:" note: "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"#[deny(unconditional_panic)]"}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:" on by default\n\nerror: aborting due to previous error\n\nerror: could not compile "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"arrays"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:bf}]},{type:a,value:bN}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The compilation didn’t produce any errors, but the program resulted in a "},{type:b,tag:aU,props:{},children:[{type:a,value:"runtime"}]},{type:a,value:" error and didn’t exit successfully. When you attempt to access an element using indexing, Rust will check that the index you’ve specified is less than the array length. If the index is greater than or equal to the array length, Rust will panic."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This is the an example of Rust’s safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed, which can lead to a number or issues like a "},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FBuffer_overflow",rel:[Z,_,$],target:aa},children:[{type:a,value:"buffer overflow"}]},{type:a,value:W}]}]},dir:aF,path:"\u002Fblog\u002Frust-data-types",extension:aG,createdAt:am,updatedAt:am},{slug:"rust-functions",title:"functions in rust",date:"2020-12-19T07:02",desc:bp,tags:[aK],toc:[{id:es,depth:Q,text:et},{id:eu,depth:Q,text:ev},{id:ew,depth:Q,text:ex}],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:"Functions are everywhere in Rust code. The most important function in the language is a function called "},{type:b,tag:h,props:{},children:[{type:a,value:U}]},{type:a,value:", which is the entry to many programs. Another key word to take note of is the "},{type:b,tag:h,props:{},children:[{type:a,value:N}]},{type:a,value:" keyword, which is a way to declare new functions."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust uses "},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FSnake_case",rel:[Z,_,$],target:aa},children:[{type:a,value:"snake case"}]},{type:a,value:" as the convention in function and variable names. Quick example of a couple of functions including "},{type:b,tag:h,props:{},children:[{type:a,value:U}]},{type:a,value:Y}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"Hello, world!\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"Another function.\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Function definitions in Rust start with fn and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We can call any function we’ve defined by entering its name followed by a set of parentheses. Because "},{type:b,tag:h,props:{},children:[{type:a,value:aR}]},{type:a,value:" is defined in the program, it can be called from inside the "},{type:b,tag:h,props:{},children:[{type:a,value:U}]},{type:a,value:" function. Note that we defined "},{type:b,tag:h,props:{},children:[{type:a,value:aR}]},{type:a,value:" after the "},{type:b,tag:h,props:{},children:[{type:a,value:U}]},{type:a,value:" function in the source code; we could have defined it before as well. Rust doesn’t care where you define your functions, only that they’re defined somewhere."}]},{type:a,value:f},{type:b,tag:R,props:{id:es},children:[{type:b,tag:x,props:{href:"#function-parameters",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:et}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Some function will have parameters as part of the functions signature. When concrete values are passed (technically called arguments) those values are used within the function."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The declaration of "},{type:b,tag:h,props:{},children:[{type:a,value:aR}]},{type:a,value:" has one parameter named "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:". The type of "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" is specified as "},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:". When 5 is passed to another_function, the "},{type:b,tag:h,props:{},children:[{type:a,value:T}]},{type:a,value:" macro puts 5 where the pair of curly brackets were in the format string."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In function signatures the type of argument a function should expect is required. This is a deliberate decision in Rust’s design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what you mean."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When you want a function to have multiple parameters, separate the parameter declarations with commas, like so:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ck}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:R,props:{id:eu},children:[{type:b,tag:x,props:{href:"#function-bodies",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:ev}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Function bodies are made up of a series of statements optionally ending in an expression. So far, we’ve only covered functions without an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don’t have the same distinctions, so let’s look at what statements and expressions are and how their differences affect the bodies of functions."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:aU,props:{},children:[{type:a,value:"Statements"}]},{type:a,value:" are instructions that perform some action and do not return a value. "},{type:b,tag:aU,props:{},children:[{type:a,value:"Expressions"}]},{type:a,value:" evaluate to a resulting value."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Creating a variable and assigning a value to it with the "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" keyword is a statement. "},{type:b,tag:h,props:{},children:[{type:a,value:ey}]},{type:a,value:" is a statement."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Function definitions are also statements; the entire preceding example is a statement in itself."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Statements do not return values. Therefore, you can’t assign a let statement to another variable, as the following code tries to do; you’ll get an error:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When you run this program, the error you’ll get looks like this:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:ez},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:eA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\nerror: expected expression, found statement "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:co},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" src\u002Fmain.rs:2:14\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"let y "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"              ^^^\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:" note: variable declaration using "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:" is a statement\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bt},{type:b,tag:h,props:{},children:[{type:a,value:"let y = 6"}]},{type:a,value:" statement does not return a value, so there isn’t anything for "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write "},{type:b,tag:h,props:{},children:[{type:a,value:"x = y = 6"}]},{type:a,value:" and have both "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:aO},{type:b,tag:h,props:{},children:[{type:a,value:bM}]},{type:a,value:" have the value 6; that is not the case in Rust."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Expressions evaluate to something and make up most of the rest of the code that you’ll write in Rust. Consider a simple math operation, such as "},{type:b,tag:h,props:{},children:[{type:a,value:"5 + 6"}]},{type:a,value:", which is an expression that evaluates to the value "},{type:b,tag:h,props:{},children:[{type:a,value:"11"}]},{type:a,value:". Expressions can be part of statements: below, the 6 in the statement "},{type:b,tag:h,props:{},children:[{type:a,value:ey}]},{type:a,value:" is an expression that evaluates to the value 6. Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, "},{type:b,tag:h,props:{},children:[{type:a,value:"{}"}]},{type:a,value:", is an expression, for example:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n        x "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:by}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ck}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"take note of this block:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:by}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In this case, evaluates to "},{type:b,tag:h,props:{},children:[{type:a,value:aP}]},{type:a,value:". That value gets bound to y as part of the let statement. Note the "},{type:b,tag:h,props:{},children:[{type:a,value:eB}]},{type:a,value:" line without a semicolon at the end, which is unlike most of the lines you’ve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value."}]},{type:a,value:f},{type:b,tag:R,props:{id:ew},children:[{type:b,tag:x,props:{href:"#functions-with-return-values",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:ex}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Functions can return values to the code that calls them. Return types are not named, but their values are declared using the an arrow "},{type:b,tag:h,props:{},children:[{type:a,value:bg}]},{type:a,value:". In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return from a function early by using the "},{type:b,tag:h,props:{},children:[{type:a,value:eC}]},{type:a,value:" keyword and specifying a value. Most functions however return the last expression implicitly. For example:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:bP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bg}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"There are no function calls, macros, or even "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" statements in the "},{type:b,tag:h,props:{},children:[{type:a,value:bP}]},{type:a,value:" function—just the number "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" by itself. Which is a perfectly valid function in Rust. Note that the functions return type is specified as "},{type:b,tag:h,props:{},children:[{type:a,value:"-\u003E i32"}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bt},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" in "},{type:b,tag:h,props:{},children:[{type:a,value:bP}]},{type:a,value:" is the function’s return value, which is why the return type is "},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Another example:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:eD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:eD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bg}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:by}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Running this code will print "},{type:b,tag:h,props:{},children:[{type:a,value:"The value of x is: 6"}]},{type:a,value:". But if we place a semicolon at the end of the line containing "},{type:b,tag:h,props:{},children:[{type:a,value:eB}]},{type:a,value:", changing it from an expression to a statement, we’ll get an error."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:ez},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:eA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:eE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:eF},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" src\u002Fmain.rs:7:24\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"7"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" fn plus_one"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"x: i32"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:" -"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" i32 "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"    --------            ^^^ expected "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:eG},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"    implicitly returns "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:" as its body has no "},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"tail"}]},{type:a,value:bI},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:eC}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:" expression\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ec}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"     x + "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"          - help: consider removing this semicolon\n\nerror: aborting due to previous error\n\nFor "},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bv}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:eH},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"functions"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:bf}]},{type:a,value:bN}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The main error message, “mismatched types,” reveals the core issue with this code. The definition of the function plus_one says that it will return an i32, but statements don’t evaluate to a value, which is expressed by (), an empty tuple. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error."}]}]},dir:aF,path:"\u002Fblog\u002Frust-functions",extension:aG,createdAt:am,updatedAt:am},{slug:"rust-ownership",title:"ownership in rust",date:"2021-01-03T08:11",desc:bp,tags:[aK],toc:[{id:eI,depth:Q,text:eJ},{id:eK,depth:Q,text:eL},{id:eM,depth:Q,text:eN},{id:eO,depth:Q,text:eP},{id:eQ,depth:Q,text:eR},{id:eS,depth:Q,text:eT},{id:eU,depth:Q,text:eV},{id:eW,depth:Q,text:eX},{id:eY,depth:Q,text:eZ}],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:"Rust’s central feature is ownership. Although the feature is straightforward to explain, it has deep implications for the rest of the language."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"All programs have to manage the way they use a computer’s memory while running. Some languages have garbage collection that constantly looks for no longer used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks at compile time. None of the ownership features slow down your program while it’s running."}]},{type:a,value:f},{type:b,tag:R,props:{id:eI},children:[{type:b,tag:x,props:{href:"#the-stack-and-the-heap",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eJ}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In many programming languages, you don’t have to think about the stack and the heap very often. But in a systems programming language like Rust, whether a value is on the stack or the heap has more of an effect on how the language behaves and why you have to make certain decisions."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Both the stack and the heap are parts of memory that are available to your code to use at runtime, but they are structured in different ways. The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as "},{type:b,tag:aU,props:{},children:[{type:a,value:"last in"}]},{type:a,value:aT},{type:b,tag:aU,props:{},children:[{type:a,value:"first out"}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead. The heap is less organized: when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough, marks it as being in use, and returns a pointer, which is the address of that location."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don’t run out of space are all problems that ownership addresses."}]},{type:a,value:f},{type:b,tag:R,props:{id:eK},children:[{type:b,tag:x,props:{href:"#ownership-rules",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eL}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here are the three rules of ownership in Rust:"}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Each value in Rust has a variable that's called its owner."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"There can only be one owner at a time."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"When the owner goes out of scope, the value will be dropped."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:R,props:{id:eM},children:[{type:b,tag:x,props:{href:"#variable-scope",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eN}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"As a first example of ownership, we’ll look at the scope of some variables. A scope is the range within a program for which an item is valid. Let’s say we have a variable that looks like this:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The variable "},{type:b,tag:h,props:{},children:[{type:a,value:aJ}]},{type:a,value:" refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it’s declared until the end of the current scope."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:cp},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F s is not valid here, it’s not yet declared"}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:e_}]},{type:a,value:b$},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:e$}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:cp},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F this scope is now over, and s is no longer valid"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In other words, there are two important points in time here:"}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"When "},{type:b,tag:h,props:{},children:[{type:a,value:aJ}]},{type:a,value:" come into scope and is therefore valid."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"It remains valid until it goes out of scope."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"At this point, the relationship between scopes and when variables are valid is similar to that in other programming languages. Now we’ll build on top of this understanding by introducing the "},{type:b,tag:h,props:{},children:[{type:a,value:aj}]},{type:a,value:" type."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The types covered "},{type:b,tag:x,props:{href:"..\u002Frust-data-types"},children:[{type:a,value:"previously"}]},{type:a,value:" are all stored on the stack and popped off the stack when their scope is over, but we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"String literals are immutable which may not be suitable for every situation. Also, not every string value can be known at author time (think user input). For these scenarios Rust has a second string type, "},{type:b,tag:h,props:{},children:[{type:a,value:aj}]},{type:a,value:". This type is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a "},{type:b,tag:h,props:{},children:[{type:a,value:aj}]},{type:a,value:" from a string literal using the "},{type:b,tag:h,props:{},children:[{type:a,value:az}]},{type:a,value:" function, like so:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This kind of string can be mutated:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aC}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\ns"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"push_str"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\", world!\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F push_str() appends a literal to a String"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:cq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:fa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F This will print `hello, world!`"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"So, what’s the difference here? Why can "},{type:b,tag:h,props:{},children:[{type:a,value:aj}]},{type:a,value:" be mutated but literals cannot? The difference is how these two types deal with memory."}]},{type:a,value:f},{type:b,tag:R,props:{id:eO},children:[{type:b,tag:x,props:{href:"#memory-and-allocation",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eP}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In the case of a string literal, we know the contents at compile time, so the text is hardcoded directly into the final executable. This is why string literals are fast and efficient. But these properties only come from the string literal’s immutability. Unfortunately, we can’t put a blob of memory into the binary for each piece of text whose size is unknown at compile time and whose size might change while running the program."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"With the "},{type:b,tag:h,props:{},children:[{type:a,value:aj}]},{type:a,value:" type, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents. This means:"}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"The memory must be requested from the memory allocator at runtime."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"We need a way of returning this memory to the allocator when we’re done with our String."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"That first part is done by us: when we call "},{type:b,tag:h,props:{},children:[{type:a,value:"String::from"}]},{type:a,value:", its implementation requests the memory it needs. This is pretty much universal in programming languages."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"However, the second part is different. In languages with a "},{type:b,tag:aU,props:{},children:[{type:a,value:"garbage collector"}]},{type:a,value:" (GC), the GC keeps track and cleans up memory that isn’t being used anymore, and we don’t need to think about it."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Without a GC, it’s our responsibility to identify when memory is no longer being used and call code to explicitly return it,just as we did to request it. Doing this correctly has historically been a difficult programming problem. If we forget,we’ll waste memory. If we do it too early, we’ll have an invalid variable. If we do it twice, that’s a bug too. We need to pair exactly one "},{type:b,tag:h,props:{},children:[{type:a,value:"allocate"}]},{type:a,value:" with exactly one "},{type:b,tag:h,props:{},children:[{type:a,value:"free"}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:e_}]},{type:a,value:b$},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:e$}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:"                                  "},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F this scope is now over, and s is no"}]},{type:a,value:"\n                                       "},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F longer valid"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"There is a natural point at which we can return the memory our String needs to the allocator: when "},{type:b,tag:h,props:{},children:[{type:a,value:aJ}]},{type:a,value:" goes out of scope.\nRust calls a special function called "},{type:b,tag:h,props:{},children:[{type:a,value:cr}]},{type:a,value:" when a variable goes out of scope. This style similar to "},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FResource_acquisition_is_initialization",rel:[Z,_,$],target:aa},children:[{type:a,value:"Resource Acquisition Is Initialization"}]},{type:a,value:" in C++,has a huge impact on the way Rust code is authored."}]},{type:a,value:f},{type:b,tag:R,props:{id:eQ},children:[{type:b,tag:x,props:{href:"#ways-variables-and-data-interact-move",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eR}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Multiple variables can interact with the same data in different ways in Rust."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We can probably guess what this is doing: bind the value "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:bK},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:"; then make a copy of the value in "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:fb},{type:b,tag:h,props:{},children:[{type:a,value:bM}]},{type:a,value:".We now have two variables, "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:aO},{type:b,tag:h,props:{},children:[{type:a,value:bM}]},{type:a,value:", and both equal "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:". This is indeed what is happening, because integers are simple values with a known, fixed size, and these two "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" values are pushed onto the stack."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bh},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The above code on the surface looks very similar to the previous example. It would be easy to assume that the way it works would be the same: that is, the second line would make a copy of the value in "},{type:b,tag:h,props:{},children:[{type:a,value:a$}]},{type:a,value:fb},{type:b,tag:h,props:{},children:[{type:a,value:bl}]},{type:a,value:". But this isn’t quite what happens."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bX},{type:b,tag:h,props:{},children:[{type:a,value:aj}]},{type:a,value:" is made up of three parts, shown on the left: a "},{type:b,tag:h,props:{},children:[{type:a,value:"pointer"}]},{type:a,value:" to the memory that holds the contents of the string, a "},{type:b,tag:h,props:{},children:[{type:a,value:"length"}]},{type:a,value:", and a "},{type:b,tag:h,props:{},children:[{type:a,value:"capacity"}]},{type:a,value:". This group of data is stored on the stack. On the right is the memory on the heap that holds the contents."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The length is how much memory, in bytes, the contents of the "},{type:b,tag:h,props:{},children:[{type:a,value:aj}]},{type:a,value:" is currently using. The capacity is the total amount of memory, in bytes, that the String has received from the allocator. The difference between length and capacity matters, but not in this context, so for now, it’s fine to ignore the capacity."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When we assign "},{type:b,tag:h,props:{},children:[{type:a,value:a$}]},{type:a,value:bK},{type:b,tag:h,props:{},children:[{type:a,value:bl}]},{type:a,value:", the String data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust does not copy the data, it would be extremely expensive in terms of runtime performance if the data on the heap grows unchecked."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust automatically calls the "},{type:b,tag:h,props:{},children:[{type:a,value:cr}]},{type:a,value:" function and cleans up the heap memory for that variable. So what would happen if there was a two pointers to the same place in memory. When both the variables goes out of scope the same place in memory will tried to be freed up. This is a problem: when "},{type:b,tag:h,props:{},children:[{type:a,value:bl}]},{type:a,value:aO},{type:b,tag:h,props:{},children:[{type:a,value:a$}]},{type:a,value:" go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"To ensure memory safety, there’s one more detail to what happens in this situation in Rust. Instead of trying to copy the allocated memory, Rust considers s1 to no longer be valid and, therefore, Rust doesn’t need to free anything when s1 goes out of scope. Check out what happens when you try to use "},{type:b,tag:h,props:{},children:[{type:a,value:a$}]},{type:a,value:" after "},{type:b,tag:h,props:{},children:[{type:a,value:bl}]},{type:a,value:" is created; it won’t work:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bh},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:fc}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You’ll get an error like this because Rust prevents you from using the invalidated reference:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"$ cargo run\n   Compiling ownership v0.1.0 "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"file:\u002F\u002F\u002Fprojects\u002Fownership"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:"E0382"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:": borrow of moved value: "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:co},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" src\u002Fmain.rs:5:28\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:" String::from"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"         -- move occurs because "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:" has "},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:ce}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"std::string::String"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"which"}]},{type:a,value:" does not implement the "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:aV},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:" trait\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"              -- value moved here\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:" \n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:fd},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:fc}]},{type:a,value:", s1"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"                            ^^ value borrowed here after move\n\nerror: aborting due to previous error\n\nFor "},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bv}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"rustc --explain E0382"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"ownership"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:bf}]},{type:a,value:bN}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"If you’ve heard the terms "},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FObject_copying#Shallow_copy",rel:[Z,_,$],target:aa},children:[{type:a,value:"shallow copy"}]},{type:a,value:aO},{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FObject_copying#Deep_copy",rel:[Z,_,$],target:aa},children:[{type:a,value:"deep copy"}]},{type:a,value:" while working with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it’s known as a move."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"There’s a design choice that’s implied by this: Rust will never automatically create “deep” copies of your data. Therefore, any automatic copying can be assumed to be inexpensive in terms of runtime performance."}]},{type:a,value:f},{type:b,tag:R,props:{id:eS},children:[{type:b,tag:x,props:{href:"#ways-variables-and-data-interact-clone",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eT}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When a deep copy is necessary and the data is required on the heap not just the stack, there is a method called "},{type:b,tag:h,props:{},children:[{type:a,value:fe}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:fe}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"s1 = {}, s2 = {}\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ff},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When you see a call to clone, you know that some arbitrary code is being executed and that code may be expensive. It’s a visual indicator that something different is going on."}]},{type:a,value:f},{type:b,tag:R,props:{id:eU},children:[{type:b,tag:x,props:{href:"#stack-only-data-copy",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eV}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"x = {}, y = {}\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there’s no reason we would want to prevent x from being valid after we create the variable y. In other words, there’s no difference between deep and shallow copying here, so calling clone wouldn’t do anything different from the usual shallow copying and we can leave it out."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust has a special annotation called the "},{type:b,tag:h,props:{},children:[{type:a,value:aV}]},{type:a,value:" trait that we can place on types like integers that are stored on the stack.  If a type has the "},{type:b,tag:h,props:{},children:[{type:a,value:aV}]},{type:a,value:" trait, an older variable is still usable after assignment. Rust won’t let us annotate a type with the "},{type:b,tag:h,props:{},children:[{type:a,value:aV}]},{type:a,value:" trait if the type, or any of its parts, has implemented the "},{type:b,tag:h,props:{},children:[{type:a,value:"Drop"}]},{type:a,value:" trait.If the type needs something special to happen when the value goes out of scope and we add the Copy annotation to that type, we’ll get a compile-time error."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"So what types are "},{type:b,tag:h,props:{},children:[{type:a,value:aV}]},{type:a,value:"? You can check the "},{type:b,tag:x,props:{href:"https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Fmarker\u002Ftrait.Copy.html",rel:[Z,_,$],target:aa},children:[{type:a,value:"documentation"}]},{type:a,value:" for the given type to be sure, but as a general rule, any group of simple scalar values can be "},{type:b,tag:h,props:{},children:[{type:a,value:aV}]},{type:a,value:", and nothing that requires allocation or is some form of resource is "},{type:b,tag:h,props:{},children:[{type:a,value:aV}]},{type:a,value:". Here are some of the types that are "},{type:b,tag:h,props:{},children:[{type:a,value:aV}]},{type:a,value:Y}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"All the integer types, such as u32."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"The Boolean type, bool, with values true and false."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"All the floating point types, such as f64."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"The character type, char."}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Tuples, if they only contain types that are also Copy. For example, (i32, i32) is Copy, but (i32, String) is not."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:R,props:{id:eW},children:[{type:b,tag:x,props:{href:"#ownership-and-functions",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eX}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F s comes into scope"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:cs}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:fg},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F s's value moves into the function..."}]},{type:a,value:ct},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F ... and so is no longer valid here"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:cp},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F x comes into scope"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:fh}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"                  "},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F x would move into the function,"}]},{type:a,value:ct},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F but i32 is Copy, so it’s okay to still"}]},{type:a,value:ct},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F use x afterward"}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F Here, x goes out of scope, then s. But because s's value was moved, nothing"}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F special happens."}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:cs}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"some_string"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:fi}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:cq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" some_string"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F Here, some_string goes out of scope and `drop` is called. The backing"}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F memory is freed."}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:fh}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"some_integer"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F some_integer comes into scope"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:cq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" some_integer"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F Here, some_integer goes out of scope. Nothing special happens."}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"If we tried to use "},{type:b,tag:h,props:{},children:[{type:a,value:aJ}]},{type:a,value:" after the call to "},{type:b,tag:h,props:{},children:[{type:a,value:cs}]},{type:a,value:", Rust would throw a compile-time error. These static checks protect us from mistakes."}]},{type:a,value:f},{type:b,tag:R,props:{id:eY},children:[{type:b,tag:x,props:{href:"#return-values-and-scope",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:eZ}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Returning values can also transfer ownership."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:fj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:fk},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F gives_ownership moves its return"}]},{type:a,value:cu},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F value into s1"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F s2 comes into scope"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" s3 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:fl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F s2 is moved into"}]},{type:a,value:cu},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F takes_and_gives_back, which also"}]},{type:a,value:cu},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F moves its return value into s3"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F Here, s3 goes out of scope and is dropped. s2 goes out of scope but was"}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F moved, so nothing happens. s1 goes out of scope and is dropped."}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:fj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bg}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:fg},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F gives_ownership will move its"}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F return value into the function"}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F that calls it"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:" some_string "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:fi}]},{type:a,value:"\n\n    some_string                              "},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F some_string is returned and"}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F moves out to the calling"}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F function"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F takes_and_gives_back will take a String and return one"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:fl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"a_string"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bg}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F a_string comes into"}]},{type:a,value:"\n                                                      "},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F scope"}]},{type:a,value:"\n\n    a_string  "},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F a_string is returned and moves out to the calling function"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by "},{type:b,tag:h,props:{},children:[{type:a,value:cr}]},{type:a,value:" unless the data has been moved to be owned by another variable."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It’s quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:fm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:fn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"The length of '{}' is {}.\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ff},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:fm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:fn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bg}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:cg}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:ea},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:fa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:cv}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F len() returns the length of a String"}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" length"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]}]},dir:aF,path:"\u002Fblog\u002Frust-ownership",extension:aG,createdAt:am,updatedAt:am},{slug:"rust-variables-and-mutability",title:"variables and mutability in rust",date:"2020-12-11T11:02",desc:bp,tags:[aK],toc:[{id:fo,depth:aL,text:fp},{id:fq,depth:aL,text:fr},{id:fs,depth:aL,text:ft}],body:{type:aD,children:[{type:b,tag:aM,props:{id:fo},children:[{type:b,tag:x,props:{href:"#first-steps",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fp}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Variables in rust are "},{type:b,tag:x,props:{href:"https:\u002F\u002Fwww.dictionary.com\u002Fbrowse\u002Fimmutable",rel:[Z,_,$],target:aa},children:[{type:a,value:"immutable"}]},{type:a,value:" by default. a helpful hint by the language to write code that is easy to follow and avoid any unwanted side effects are reduced."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Once a immutable variable is bound to a name, it cannot change. Let's have a quick look at what that means."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The above code will not compile. We are trying to change the value of "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" from 5 to 6. The compiler will complain pretty loudly in fact."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:"E0384"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:": cannot assign twice to immutable variable "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:co},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" src\u002Fmain.rs:4:5\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"         -\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:fk},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"         first assignment to "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"         help: "},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"make"}]},{type:a,value:" this binding mutable: "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"mut x"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:fd},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:a,value:", x"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"     x "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"     ^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor "},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bv}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:"rustc --explain E0384"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:fu},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:bf}]},{type:a,value:d$}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This is a good thing, the compiler is nudging you to solving the issue at hand. Take note of the following message: "},{type:b,tag:h,props:{},children:[{type:a,value:"cannot assign twice to immutable variable x"}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Now we know we have two options to achieve the desired output. We can either create a new immutable variable and assign "},{type:b,tag:h,props:{},children:[{type:a,value:aA}]},{type:a,value:" to it. Or, we can make "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" mutable. If we want to make "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" mutable we can add the "},{type:b,tag:h,props:{},children:[{type:a,value:aC}]},{type:a,value:" keyword to the variable declaration."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aC}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We can now run the program"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:fv},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:fw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:fx},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bH}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:a,value:".30s\n     Running "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:fy},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:cw},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:cw},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aA}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In some cases, you’ll want to make a variable mutable because it makes the code more convenient to write than if it had only immutable variables."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"There are always going to be trade offs when choosing to make things immutable or mutable. For instance if the data structure was particularly large it may make sense to mutate in place rather than save a copy and re-allocate the data. With small data it may make sense to create new instances of the data and writing it in a more functional style, the drop in performance may a price worth paying for legibility."}]},{type:a,value:f},{type:b,tag:aM,props:{id:fq},children:[{type:b,tag:x,props:{href:"#variables-vs-constants",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fr}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Having an immutable variable may sound like that variable is really a constant. However in rust constants cannot be marked as mutable using "},{type:b,tag:h,props:{},children:[{type:a,value:aC}]},{type:a,value:". They are always immutable."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You declare constants using the "},{type:b,tag:h,props:{},children:[{type:a,value:fz}]},{type:a,value:" keyword instead of let as you would with a variable. You also must annotate a type. They can be declared in any scope including the global scope which makes them useful for values that many parts of code need to know about."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The last difference is that constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Below is how you would declare a constant for "},{type:b,tag:h,props:{},children:[{type:a,value:fA}]},{type:a,value:" with a value set to 100,000."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:fz}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,cx]},children:[{type:a,value:fA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:dX}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"100_000"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Constants stick around for the entire time a program runs within the scope in which it is declared. These values are the non-changing hardcoded values like "},{type:b,tag:h,props:{},children:[{type:a,value:"SPEED_OF_SOUND"}]},{type:a,value:bI},{type:b,tag:h,props:{},children:[{type:a,value:"HOURS_IN_DAY"}]},{type:a,value:". They let maintainers know that these values are intentionally hardcoded. It also allows these values to be changed in one place, should they need to be updated in the future."}]},{type:a,value:f},{type:b,tag:aM,props:{id:fs},children:[{type:b,tag:x,props:{href:"#shadowing",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:ft}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You can declare a new variable with the same name as a previous variable, and the new variable shadows the previous variable. The first variable is "},{type:b,tag:aU,props:{},children:[{type:a,value:"shadowed"}]},{type:a,value:" by the second. This means the second variables value is what appears when the variable is used. A quick example:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:av}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:by}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bc}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,V,L]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This program first binds "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" to a value of "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:". Then it shadows "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" by repeating "},{type:b,tag:h,props:{},children:[{type:a,value:"let x ="}]},{type:a,value:", taking the original value and adding "},{type:b,tag:h,props:{},children:[{type:a,value:ak}]},{type:a,value:" so the value of "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" is then "},{type:b,tag:h,props:{},children:[{type:a,value:aA}]},{type:a,value:". The third let statement also shadows "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:", multiplying the previous value by "},{type:b,tag:h,props:{},children:[{type:a,value:ar}]},{type:a,value:" to give "},{type:b,tag:h,props:{},children:[{type:a,value:af}]},{type:a,value:" a final value of "},{type:b,tag:h,props:{},children:[{type:a,value:cn}]},{type:a,value:". When we run this program, it will output the following:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:fv},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:fw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:fx},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bH}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aB}]},{type:a,value:".31s\n     Running "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:fy},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:cw},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cn}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Shadowing is different from marking a variable as "},{type:b,tag:h,props:{},children:[{type:a,value:aC}]},{type:a,value:". We would get a compile-time error\nif we accidentally try to reassign to this variable without using the "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" keyword. Using "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" we can perform transformations on a value but have the variable be immutable after those transformations have occurred."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The other difference between "},{type:b,tag:h,props:{},children:[{type:a,value:aC}]},{type:a,value:" and shadowing is that because we’re effectively creating a new variable when we use the "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, but we really want to store that input as a number:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:cy},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:fB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:cy},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:fC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:cv}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This is valid as we use the keyword "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" which ensures the second "},{type:b,tag:h,props:{},children:[{type:a,value:"spaces"}]},{type:a,value:" is a brand new variable. This saves us the need to come up with new names for each assignment, like "},{type:b,tag:h,props:{},children:[{type:a,value:"spaces_str"}]},{type:a,value:bI},{type:b,tag:h,props:{},children:[{type:a,value:"spaces_num"}]},{type:a,value:". Note that using "},{type:b,tag:h,props:{},children:[{type:a,value:aC}]},{type:a,value:" will not achieve the desired outcome:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bh},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aC}]},{type:a,value:cy},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:fB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n    spaces "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:fC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:cv}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:bR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:eE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:eF},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ae}]},{type:a,value:" src\u002Fmain.rs:3:14\n  "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"     spaces "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:" spaces.len"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:a,value:"              ^^^^^^^^^^^^ expected "},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:cl}]},{type:a,value:cm},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:eG},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:cg},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:a,value:d_},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bv}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:eH},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,v]},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]},{type:a,value:fu},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:E}]}]},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:W}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:bf}]},{type:a,value:bN}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"I'll be looking at data types next"}]}]},dir:aF,path:"\u002Fblog\u002Frust-variables-and-mutability",extension:aG,createdAt:am,updatedAt:am},{slug:"thinking-out-loud",title:"thinking out loud",date:"2020-11-30T08:52",desc:"Some thoughts and ideas as I begin to write again",tags:[cz],toc:[],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:"It's been a while since I wrote some things down, my focus has shifted and I have my eye on new topics and ideas."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Day to day going through major growth in my day job, the last 18 months or so have changed me as a professional dramatically."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Next areas of focus:"}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"AWS serverless architecture"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"3D theory"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"System design"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Rust & WASM"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Testing"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This areas of focus are going to be my main focus for the next few months, by writing them down I hope I can be a little more accountable for what I am learning and writing about. I would like to continue to explore some additional ideas using JS, TS and Node. I have a strong competency in JavaScript and I would like to continue on that path to mastery."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Short and sweet."}]}]},dir:aF,path:"\u002Fblog\u002Fthinking-out-loud",extension:aG,createdAt:am,updatedAt:am},{slug:"wasm-a-wasm-game-of-life",title:"a wasm way of life",date:"2021-03-29T05:02",desc:"coways game of life in wasm",tags:[fD,aK],toc:[{id:fE,depth:Q,text:fF},{id:fG,depth:Q,text:fH},{id:fI,depth:Q,text:fJ}],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:fK}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:x,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FConway%27s_Game_of_Life",rel:[Z,_,$],target:aa},children:[{type:a,value:"Wikipedia gives a great description of the rules of Conway's Game of Life"}]},{type:a,value:Y}]},{type:a,value:f},{type:b,tag:fL,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, alive or dead,\nor \"populated\" or \"unpopulated\". Every cell interacts with its eight neighbours, which are the cells that are horizontally,\nvertically, or diagonally adjacent. At each step in time, the following transitions occur:"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Any live cell with fewer than two live neighbours dies, as if caused by underpopulation."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Any live cell with two or three live neighbours lives on to the next generation."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Any live cell with more than three live neighbours dies, as if by overpopulation."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction."}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed—births and deaths occur simultaneously, and the discrete moment at which this happens is sometimes called a tick (in other words, each generation is a pure function of the preceding one). The rules continue to be applied repeatedly to create further generations."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Consider the following initial universe:"}]},{type:a,value:f},{type:b,tag:R,props:{id:fE},children:[{type:b,tag:x,props:{href:"#initial-universe",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fF}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We can calculate the next generation by considering each cell. The top left cell is dead. Rule (4) is the only transition rule that applies to dead cells. However, because the top left cell does not have exactly three live neighbors, the transition rule does not apply, and it remains dead in the next generation. The same goes for every other cell in the first row as well."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Things get interesting when we consider the top live cell, in the second row, third column. For live cells, any of the first three rules potentially applies. In this cell's case, it has only one live neighbor, and therefore rule (1) applies: this cell will die in the next generation. The same fate awaits the bottom live cell."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The middle live cell has two live neighbors: the top and bottom live cells. This means that rule (2) applies, and it remains live in the next generation."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The final interesting cases are the dead cells just to the left and right of the middle live cell. The three live cells are all neighbors both of these cells, which means that rule (4) applies, and these cells will become alive in the next generation."}]},{type:a,value:f},{type:b,tag:R,props:{id:fG},children:[{type:b,tag:x,props:{href:"#design",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fH}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Before we dive in, we have some design choices to consider."}]},{type:a,value:f},{type:b,tag:dl,props:{id:"infinite-universe"},children:[{type:b,tag:x,props:{href:"#infinite-universe",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:"Infinite Universe"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The Game of Life is played in an infinite universe, but we do not have infinite memory and compute power. Working around this rather annoying limitation usually comes in one of three flavors:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Keep track of which subset of the universe has interesting things happening, and expand this region as needed. In the worst case, this expansion is unbounded and the implementation will get slower and slower and eventually run out of memory."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Create a fixed-size universe, where cells on the edges have fewer neighbors than cells in the middle. The downside with this approach is that infinite patterns, like gliders, that reach the end of the universe are snuffed out."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Create a fixed-size, periodic universe, where cells on the edges have neighbors that wrap around to the other side of the universe. Because neighbors wrap around the edges of the universe, gliders can keep running forever."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We will implement the third option."}]},{type:a,value:f},{type:b,tag:R,props:{id:fI},children:[{type:b,tag:x,props:{href:"#interfacing-rust-and-javascript",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fJ}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"JavaScript's garbage-collected heap — where Objects, Arrays, and DOM nodes are allocated — is distinct from WebAssembly's linear memory space, where our Rust values live.JavaScript can read and write to the WebAssembly linear memory space, but only as an ArrayBuffer of scalar values (u8, i32, f64, etc...). WebAssembly functions also take and return scalar values. These are the building blocks from which all WebAssembly and JavaScript communication is constituted."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:bT}]},{type:a,value:" defines a common understanding of how to work with compound structures across this boundary. It involves boxing Rust structures, and wrapping the pointer in a JavaScript class forj usability, or indexing into a table of JavaScript objects from Rust. "},{type:b,tag:h,props:{},children:[{type:a,value:bT}]},{type:a,value:" is very convenient, but it does not remove the need to consider our data representation, and what values and structures are passed across this boundary. Instead, think of it as a tool for implementing the interface design you choose."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When designing an interface between WebAssembly and JavaScript, we want to optimize for the following properties:"}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Minimizing copying into and out of the WebAssembly linear memory. Unnecessary copies impose unnecessary overhead."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Minimizing serializing and deserializing. Similar to copies, serializing and deserializing also imposes overhead, and often imposes copying as well. If we can pass opaque handles to a data structure — instead of serializing it on one side, copying it into some known location in the WebAssembly linear memory, and deserializing on the other side — we can often reduce a lot of overhead. "},{type:b,tag:h,props:{},children:[{type:a,value:bT}]},{type:a,value:" helps us define and work with opaque handles to JavaScript Objects or boxed Rust structures."}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"As a general rule of thumb, a good JavaScript \u003C--\u003E WebAssembly interface design is often one where large, long-lived data structures are implemented as Rust types that live in the WebAssembly linear memory, and are exposed to JavaScript as opaque handles. JavaScript calls exported WebAssembly functions that take these opaque handles, transform their data, perform heavy computations, query the data, and ultimately return a small, copy-able result. By only returning the small result of the computation, we avoid copying and\u002For serializing everything back and forth between the JavaScript garbage-collected heap and the WebAssembly linear memory."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We don't want to copy the whole universe into and out of the WebAssembly linear memory on every tick. We do not want to allocate objects for every cell in the universe, nor do we want to impose a cross-boundary call to read and write each cell."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Where does this leave us? We can represent the universe as a flat array that lives in the WebAssembly linear memory, and has a byte for each cell. 0 is a dead cell and 1 is a live cell."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here is what a 4 by 4 universe looks like in memory:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[fM,B]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n|0 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|13|14|15|  \n+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"To find the array index of the cell at a given row and column in the universe, we can use this formula:"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"index(row, column, universe) = row * width(universe) + column"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"We have several ways of exposing the universe's cells to JavaScript. To begin, we will implement "},{type:b,tag:h,props:{},children:[{type:a,value:"std::fmt::Display"}]},{type:a,value:" for Universe, which we can use to generate a Rust String of the cells rendered as text characters. This Rust String is then copied from the WebAssembly linear memory into a JavaScript String in the JavaScript's garbage-collected heap, and is then displayed by setting HTML textContent."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Another viable design alternative would be for Rust to return a list of every cell that changed states after each tick, instead of exposing the whole universe to JavaScript. This way, JavaScript wouldn't need to iterate over the whole universe when rendering, only the relevant subset. The trade off is that this delta-based design is slightly more difficult to implement."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:x,props:{href:"https:\u002F\u002Fgithub.com\u002Fadmhpr\u002Fwasm-way-of-life",rel:[Z,_,$],target:aa},children:[{type:a,value:"Implementation"}]}]}]},dir:aF,path:"\u002Fblog\u002Fwasm-a-wasm-game-of-life",extension:aG,createdAt:am,updatedAt:am},{slug:"wasm-first-steps",title:"wasm first steps",date:"2021-01-29T05:02",desc:"first steps with wasm",tags:[fD,aK],toc:[{id:fN,depth:Q,text:fO},{id:fP,depth:Q,text:fQ},{id:fR,depth:Q,text:fS},{id:fT,depth:Q,text:fU},{id:fV,depth:Q,text:fW},{id:fX,depth:Q,text:fY}],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:fK}]},{type:a,value:f},{type:b,tag:R,props:{id:fN},children:[{type:b,tag:x,props:{href:"#getting-started",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fO}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"I'll be using a template to get started, the folks over at "},{type:b,tag:x,props:{href:"https:\u002F\u002Fgithub.com\u002Frustwasm",rel:[Z,_,$],target:aa},children:[{type:a,value:"rustwasm"}]},{type:a,value:" have set up the boiler plate to get started. Note that "},{type:b,tag:x,props:{href:"https:\u002F\u002Fgithub.com\u002Fcargo-generate\u002Fcargo-generate",rel:[Z,_,$],target:aa},children:[{type:a,value:"cargo generate"}]},{type:a,value:" is also used."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,fM]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cargo generate --git https:\u002F\u002Fgithub.com\u002Frustwasm\u002Fwasm-pack-template\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"using "},{type:b,tag:h,props:{},children:[{type:a,value:cA}]},{type:a,value:" as name of the project."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,ab,M]},children:[{type:a,value:"cd"}]},{type:a,value:" wasm-game-of-life\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"here are the contents:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"wasm-game-of-life\u002F\n├── Cargo.toml\n├── LICENSE_APACHE\n├── LICENSE_MIT\n├── README.md\n└── src\n   ├── lib.rs\n   └── utils.rs\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"an overview"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"Cargo.toml"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here is where dependencies and meta data are defined for the cargo, which is Rust's package manager and build tool. As we used a template to inialise the project, the file is already pre-configured with the "},{type:b,tag:h,props:{},children:[{type:a,value:cB}]},{type:a,value:" dependency."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"src\u002Flib.rs"}]},{type:a,value:"\nThis file is the root of the Rust crate that is going to be compiled into WebAssembly. It uses "},{type:b,tag:h,props:{},children:[{type:a,value:cB}]},{type:a,value:" to interface with JavaScript. It currently exports the "},{type:b,tag:h,props:{},children:[{type:a,value:bB}]},{type:a,value:" function which uses the "},{type:b,tag:h,props:{},children:[{type:a,value:"window.alert"}]},{type:a,value:" method to alert a message."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,K]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"mod"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,"module-declaration",bU]},children:[{type:a,value:"utils"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"use"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bU]},children:[{type:a,value:bT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:a,value:"prelude"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bc}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F When the `wee_alloc` feature is enabled, use `wee_alloc` as the global"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F allocator."}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,bV,bm]},children:[{type:a,value:"#[cfg(feature = "},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"wee_alloc\""}]},{type:a,value:")]"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,bV,bm]},children:[{type:a,value:"#[global_allocator]"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"static"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,cx]},children:[{type:a,value:"ALLOC"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bU]},children:[{type:a,value:fZ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:f_}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bU]},children:[{type:a,value:fZ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:f_}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:at}]},{type:b,tag:c,props:{className:[d,cx]},children:[{type:a,value:"INIT"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,bV,bm]},children:[{type:a,value:f$}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"extern"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:ga}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:cl}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:cm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,bV,bm]},children:[{type:a,value:f$}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"pub"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,O,u]},children:[{type:a,value:bB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ga}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"Hello, wasm-game-of-life!\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"src\u002Futils.rs"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The src\u002Futils.rs module provides common utilities to make working with Rust compiled to WebAssembly easier."}]},{type:a,value:f},{type:b,tag:R,props:{id:fP},children:[{type:b,tag:x,props:{href:"#building-the-project",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fQ}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"I'll be using "},{type:b,tag:x,props:{href:"https:\u002F\u002Fgithub.com\u002Frustwasm\u002Fwasm-pack",rel:[Z,_,$],target:aa},children:[{type:a,value:"wasm-pack"}]},{type:a,value:" to orchestrate the following build steps:"}]},{type:a,value:f},{type:b,tag:aQ,props:{},children:[{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Ensure that we have Rust 1.30 or newer and the "},{type:b,tag:h,props:{},children:[{type:a,value:"wasm32-unknown-unknown"}]},{type:a,value:" target installed via "},{type:b,tag:h,props:{},children:[{type:a,value:"rustup"}]},{type:a,value:r}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Compile the Rust sources into a WebAssembly "},{type:b,tag:h,props:{},children:[{type:a,value:".wasm"}]},{type:a,value:" binary via cargo,"}]},{type:a,value:f},{type:b,tag:ac,props:{},children:[{type:a,value:"Use "},{type:b,tag:h,props:{},children:[{type:a,value:cB}]},{type:a,value:" to generate the JavaScript API for using our Rust-generated WebAssembly."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The above points can be satisfied, the following command is ran inside the project directory:\n"},{type:b,tag:h,props:{},children:[{type:a,value:"wasm-pack build"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When the build is completed, artifacts are generated in the "},{type:b,tag:h,props:{},children:[{type:a,value:"pkg"}]},{type:a,value:" directory, with the following content:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"pkg\u002F\n├── package.json\n├── README.md\n├── wasm_game_of_life_bg.wasm\n├── wasm_game_of_life.d.ts\n└── wasm_game_of_life.js\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"wasm-game-of-life\u002Fpkg\u002Fwasm_game_of_life.d.ts"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bt},{type:b,tag:h,props:{},children:[{type:a,value:".d.ts"}]},{type:a,value:" file contains Typescript type declarations for the JavaScript glue. One advantage of this is the ability to have calls into WebAssembly functions type checked, meaning an IDE can provide autocompletions and suggestions."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,"language-typescript"]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"export"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:u}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"void"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"wasm-game-of-life\u002Fpkg\u002Fpackage.json"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:bt},{type:b,tag:x,props:{href:"https:\u002F\u002Fdocs.npmjs.com\u002Fcli\u002Fv7\u002Fconfiguring-npm\u002Fpackage-json",rel:[Z,_,$],target:aa},children:[{type:a,value:gb}]},{type:a,value:" file contains metadata about the generated JavaScript and WebAssembly package. This is used by npm and JavaScript bundlers to determine dependencies across packages, package names, versions, and a bunch of other stuff. It helps Rust (and ultimately wasm) integrate with JavaScript tooling and allows us to publish the package to npm."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,gc]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"name\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:cC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"collaborators\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"Your Name \u003Cyour.email@example.com\u003E\""}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"description\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bn,k]},children:[{type:a,value:bn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"version\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"0.1.0\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"license\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bn,k]},children:[{type:a,value:bn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"repository\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bn,k]},children:[{type:a,value:bn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"files\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ah}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"wasm_game_of_life_bg.wasm\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:gd}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"main\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"wasm_game_of_life.js\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"types\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:gd}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:R,props:{id:fR},children:[{type:b,tag:x,props:{href:"#adding-the-package-it-to-a-web-page",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fS}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"To add the package to a web page we can bootstrap a web based wasm project using the "},{type:b,tag:x,props:{href:"https:\u002F\u002Fgithub.com\u002Frustwasm\u002Fcreate-wasm-app",rel:[Z,_,$],target:aa},children:[{type:a,value:"create-wasm-app"}]},{type:a,value:" JavaScript project template."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Run this command within the project directory:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bC}]},{type:a,value:" init wasm-app www\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here's the output in the "},{type:b,tag:h,props:{},children:[{type:a,value:cD}]},{type:a,value:" directoy:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"wasm-game-of-life\u002Fwww\u002F\n├── bootstrap.js\n├── index.html\n├── index.js\n├── LICENSE-APACHE\n├── LICENSE-MIT\n├── package.json\n├── README.md\n└── webpack.config.js\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Let's take a tour of the files."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:ge}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This package.json comes pre-configured with "},{type:b,tag:h,props:{},children:[{type:a,value:"webpack"}]},{type:a,value:aO},{type:b,tag:h,props:{},children:[{type:a,value:"webpack-dev-serve"}]},{type:a,value:"r dependencies, as well as a dependency on "},{type:b,tag:h,props:{},children:[{type:a,value:"hello-wasm-pac"}]},{type:a,value:"k, which is a version of the initial wasm-pack-template package that has been published to npm."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"wasm-game-of-life\u002Fwww\u002Fwebpack.config.js"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This file configures webpack and its local development server. It comes pre-configured, and you shouldn't have to tweak this at all to get webpack and its local development server working."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"wasm-game-of-life\u002Fwww\u002Findex.html"}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This is the root HTML file for the Web page. It doesn't do much other than load bootstrap.js, which is a very thin wrapper around index.js."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,"language-html"]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,"doctype"]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"\u003C!"}]},{type:b,tag:c,props:{className:[d,"doctype-tag"]},children:[{type:a,value:"DOCTYPE"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,"name"]},children:[{type:a,value:cE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aS}]},{type:a,value:cE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aS}]},{type:a,value:gf}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aS}]},{type:a,value:cz}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bm]},children:[{type:a,value:"charset"}]},{type:b,tag:c,props:{className:[d,gg]},children:[{type:b,tag:c,props:{className:[d,e,gh]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bW}]},{type:a,value:"utf-8"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bW}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aS}]},{type:a,value:gi}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:"Hello wasm-pack!"},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bD}]},{type:a,value:gi}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bD}]},{type:a,value:gf}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aS}]},{type:a,value:gj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aS}]},{type:a,value:cF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,bm]},children:[{type:a,value:"src"}]},{type:b,tag:c,props:{className:[d,gg]},children:[{type:b,tag:c,props:{className:[d,e,gh]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bW}]},{type:a,value:".\u002Fbootstrap.js"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bW}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:b,tag:c,props:{className:[d,cF]},children:[]},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bD}]},{type:a,value:cF}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bD}]},{type:a,value:gj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,al]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bD}]},{type:a,value:cE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ae}]}]},{type:a,value:ad}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:gk}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The index.js is the main entry point for our Web page's JavaScript. It imports the hello-wasm-pack npm package, which contains the default wasm-pack-template's compiled WebAssembly and JavaScript glue, then it calls hello-wasm-pack's greet function."}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,gl]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k,bo]},children:[{type:a,value:gm}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,gn]},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bc}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k,bo]},children:[{type:a,value:go}]},{type:a,value:gp}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k,bo]},children:[{type:a,value:az}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"hello-wasm-pack\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:gq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,gr,u,gs]},children:[{type:a,value:bB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:R,props:{id:fT},children:[{type:b,tag:x,props:{href:"#install-dependencies",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fU}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"First, ensure that the local development server and its dependencies are installed by running "},{type:b,tag:h,props:{},children:[{type:a,value:"npm install"}]},{type:a,value:" within the "},{type:b,tag:h,props:{},children:[{type:a,value:cD}]},{type:a,value:" subdirectory:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bC}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:gt}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"This will read "},{type:b,tag:h,props:{},children:[{type:a,value:gb}]},{type:a,value:" and install the dependencies listed there, including the webpack javascript bundler and development server."}]},{type:a,value:f},{type:b,tag:fL,props:{},children:[{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Note that webpack is not required for working with Rust and WebAssembly, it is just the bundler and development server we've chosen for convenience here. Parcel and Rollup should also support importing WebAssembly as ECMAScript modules. You can also use Rust and WebAssembly "},{type:b,tag:x,props:{href:"https:\u002F\u002Frustwasm.github.io\u002Fdocs\u002Fwasm-bindgen\u002Fexamples\u002Fwithout-a-bundler.html",rel:[Z,_,$],target:aa},children:[{type:a,value:"without a bundler"}]},{type:a,value:" if you prefer!"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:R,props:{id:fV},children:[{type:b,tag:x,props:{href:"#using-local-package-in-www",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fW}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rather than use the "},{type:b,tag:h,props:{},children:[{type:a,value:"hello-wasm-pack package"}]},{type:a,value:" from npm, we want to use our local "},{type:b,tag:h,props:{},children:[{type:a,value:cA}]},{type:a,value:" package instead. This will allow us to incrementally develop our Game of Life program."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Open up "},{type:b,tag:h,props:{},children:[{type:a,value:ge}]},{type:a,value:" and next to \"devDependencies\", add the \"dependencies\" field, including a \"wasm-game-of-life\": \"file:..\u002Fpkg\" entry:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,gc]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F ..."}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"dependencies\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:"                     "},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F Add this three lines block!"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:cC}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\"file:..\u002Fpkg\""}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"\"devDependencies\""}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"\u002F\u002F..."}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Next, modify "},{type:b,tag:h,props:{},children:[{type:a,value:gk}]},{type:a,value:" to import "},{type:b,tag:h,props:{},children:[{type:a,value:cA}]},{type:a,value:" instead of the "},{type:b,tag:h,props:{},children:[{type:a,value:"hello-wasm-pack"}]},{type:a,value:" package:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,gl]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k,bo]},children:[{type:a,value:gm}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,gn]},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bc}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k,bo]},children:[{type:a,value:go}]},{type:a,value:gp}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k,bo]},children:[{type:a,value:az}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:cC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:gq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,gr,u,gs]},children:[{type:a,value:bB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Since we declared a new dependency, we need to install it:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bC}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:gt}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"or "},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bC}]},{type:a,value:" i"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The web page is now ready to be served locally!"}]},{type:a,value:f},{type:b,tag:R,props:{id:fX},children:[{type:b,tag:x,props:{href:"#serving-locally",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:fY}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Next, open a new terminal for the development server. Running the server in a new terminal lets us leave it running in the background, and doesn't block us from running other commands in the meantime. In the new terminal, run this command from within the "},{type:b,tag:h,props:{},children:[{type:a,value:cD}]},{type:a,value:" directory:"}]},{type:a,value:f},{type:b,tag:y,props:{className:[z]},children:[{type:b,tag:A,props:{className:[B,ag]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bC}]},{type:a,value:" run start\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Navigate your Web browser to http:\u002F\u002Flocalhost:8080\u002F and you should be greeted with an alert message. Anytime you make changes and want them reflected on http:\u002F\u002Flocalhost:8080\u002F, just re-run the wasm-pack build command within the wasm-game-of-life directory."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"That's it, we have a hello world!"}]}]},dir:aF,path:"\u002Fblog\u002Fwasm-first-steps",extension:aG,createdAt:am,updatedAt:am},{slug:"why-rust",title:"why rust",date:"2020-12-08T06:52",desc:"There is something drawing me down into the system, closer to the metal. As someone who has spent the majority of their time up in the clouds of abstraction (JavaScript) learning a language closer to the machine has its appeal.",tags:[aK,cz],toc:[],body:{type:aD,children:[{type:b,tag:j,props:{},children:[{type:a,value:"There is something drawing me down towards the bits, closer to the metal. As someone who has spent the majority of their career up in the clouds of abstraction (JavaScript) learning a language closer to the machine has it's appeal. "},{type:b,tag:x,props:{href:"https:\u002F\u002Fwebassembly.org\u002F",rel:[Z,_,$],target:aa},children:[{type:a,value:"WASM"}]},{type:a,value:" is knocking at the door of the modern browser and Rust seems to gel well with next this chapter in browser performance."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Rust's "},{type:b,tag:x,props:{href:"https:\u002F\u002Finsights.stackoverflow.com\u002Fsurvey\u002F2020#technology-most-loved-dreaded-and-wanted-languages-loved",rel:[Z,_,$],target:aa},children:[{type:a,value:"soaring popularity"}]},{type:a,value:" has been hard to ignore. Some early experiments with the language and the "},{type:b,tag:x,props:{href:"https:\u002F\u002Fgithub.com\u002Frust-lang\u002Frls",rel:[Z,_,$],target:aa},children:[{type:a,value:"Rust Language Server"}]},{type:a,value:" in VSCode have pushed me beyond dipping my toes to wading out a little further."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"There seems to be a focus on "},{type:b,tag:x,props:{href:"https:\u002F\u002Ftwitter.com\u002Fmahemoff\u002Fstatus\u002F1947230411948032",rel:[Z,_,$],target:aa},children:[{type:a,value:"DX (Developer Experience)"}]},{type:a,value:" and ease of use."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The core tenants of performance, reliability and productivity certainly resonate. I want things to be fast, consistent and I want to be able to get them done in a timely manner. Plus all that memory and thread safety appeal to a naive JS dev like myself. Rust also has "},{type:b,tag:x,props:{href:"https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Findex.html",rel:[Z,_,$],target:aa},children:[{type:a,value:"great documentation"}]},{type:a,value:aO},{type:b,tag:x,props:{href:"https:\u002F\u002Fwww.rust-lang.org\u002Fcommunity",rel:[Z,_,$],target:aa},children:[{type:a,value:"vibrant community"}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Worst case scenario I learn a new language and maybe a few concepts I can bring into my daily work. I plan on going through the basics into data structures and algos over the next few months posting about my "},{type:b,tag:x,props:{href:"https:\u002F\u002Fwww.swyx.io\u002Flearn-in-public\u002F",rel:[Z,_,$],target:aa},children:[{type:a,value:"learnings and discoveries in public"}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Keeping these short and to the point as I shift through the gears of writing again. Looking forward to starting the next phase, onwards and upwards!"}]}]},dir:aF,path:"\u002Fblog\u002Fwhy-rust",extension:aG,createdAt:am,updatedAt:am}]}],fetch:{},mutations:void 0}}("text","element","span","token","punctuation","\n"," ","code","operator","p","keyword",";","(",")","number","|","=",",","string","let","function","variable","\n    ","a","div","nuxt-content-highlight","pre","line-numbers","{","}","`","comment","true",-1,"icon","icon-link","language-rust","property","class-name","fn","function-definition","\n\n    ",3,"h3","\n  ","println!","main","macro",".","5",":","nofollow","noopener","noreferrer","_blank","builtin","li","\n\n","\u003E","x","language-bash","[","]","String","1","tag","2021-11-29T09:23:31.004Z"," x ","3"," x","  ","2","\n        ","::","if","src\u002Fmain.rs","!","i32","\"hello\"","from","6","0","mut","root","       ","\u002Fblog",".md"," number ","\"The value of x is: {}\"","s","rust",2,"h2","else"," and ","4","ul","another_function","\u003C",", ","strong","Copy","   ","10"," a ","     "," y","s1","loop","break","*"," a","\n\nTo learn more, run the ","command","-\u003E","    "," s "," s1 "," s1","s2","attr-name","null","module","A look at basic building blocks of rust","boolean","while","for","The ","\nerror","more"," information about this error, try ","\nerror: could not compile ","+"," y "," s2 ","greet","npm","\u003C\u002F","%","==",", and ","in"," or ","char"," to ","6.4","y"," again with --verbose.\n","\n    x ","five","\n                                             ","$ cargo run\n   Compiling variables v0.1.0 ","file:\u002F\u002F\u002Fprojects\u002Fvariables","wasm_bindgen","namespace","attribute","\"","A "," NEXT  "," number"," counter ","\n\n        ","30"," index ","index"," element ","type","-bit ","usize","f32","f64","500","\"The value of y is: {}\"","&","str","12","\n --","                      ","\"{}\"","drop","takes_ownership","\n                                    ","\n                                        ","len","\nThe value of x is: ","constant"," spaces ","meta","wasm-game-of-life","wasm-bindgen","\"wasm-game-of-life\"","wasm-game-of-life\u002Fwww","html","script","singly linked list","The world is swarming in lists, to-dos, shopping, sprint backlogs. Linear in nature they help us mere mortals keep track of things and their relationships to each other. Having a re-visit to this fundamental data structure with the help of Rust.","linked-lists","Linked Lists","example","Example","pros","Pros","cons","Cons","doubly-linked-lists","Doubly Linked Lists","skip-lists","Skip Lists","\n+--------+  ","----------","------------","if-expressions","if Expressions","handling-multiple-conditions-with-else-if","Handling Multiple Conditions with else if","using-if-in-a-let-statement","Using if in a let Statement","repetition-with-loops","Repetition with Loops","returning-values-from-loops","Returning Values from Loops","conditional-loops-with-while","Conditional Loops with while","looping-through-a-collection-with-for","Looping Through a Collection with for","bool"," condition ","h4","It’s often useful for a program to evaluate a condition within a loop. While the condition is true, the loop runs. When the condition ceases to be true, the program calls ","+=","result","\"{}!\"","\"LIFT OFF!!!\"","\nLIFT OFF","20","40","50","\"the value is: {}\""," element","rev","data-types","Data Types","scalar-types","Scalar Types","integer","Integer","integer-literals","Integer Literals","floating-point-types","Floating-Point Types","numeric-operations","Numeric Operations","Boolean","character-type","Character Type","compound-types","Compound Types","tuple-type","Tuple Type","array-type","Array Type","accessing-array-elements","Accessing Array Elements","invalid-array-element-access","Invalid Array Element Access","u32","\"42\"","\"Not a number!\"","\n\nerror: aborting due to previous error\n\nFor "," again with --verbose.\n\n"," length ","--------","8"," tup","u8","\"January\"","\"February\"","\"March\"","\"April\"","\"May\"","\"June\"","\"July\"","\n              ","\"August\"","\"September\"","\"October\"","\"November\"","\"December\"","function-parameters","Function Parameters","function-bodies","Function Bodies","functions-with-return-values","Functions with Return Values","let y = 6;","$ cargo run\n   Compiling functions v0.1.0 ","file:\u002F\u002F\u002Fprojects\u002Ffunctions","x + 1","return","plus_one","E0308",": mismatched types\n --",", found ","rustc --explain E0308","the-stack-and-the-heap","The Stack and the Heap","ownership-rules","Ownership Rules","variable-scope","Variable Scope","memory-and-allocation","Memory and Allocation","ways-variables-and-data-interact-move","Ways Variables and Data Interact: Move","ways-variables-and-data-interact-clone","Ways Variables and Data Interact: Clone","stack-only-data-copy","Stack-Only Data: Copy","ownership-and-functions","Ownership and Functions","return-values-and-scope","Return values and scope","\u002F\u002F s is valid from this point forward","\u002F\u002F do stuff with s"," s"," and bind it to ","\"{}, world!\"","     println","clone"," s2","             ","makes_copy","\u002F\u002F some_string comes into scope","gives_ownership","         ","takes_and_gives_back"," len","calculate_length","first-steps","First Steps","variables-vs-constants","Variables vs Constants","shadowing","Shadowing","variables","\n    Finished dev ","unoptimized + debuginfo"," target","target\u002Fdebug\u002Fvariables","const","MAX","\"   \""," spaces","wasm","initial-universe","Initial Universe","design","Design","interfacing-rust-and-javascript","Interfacing Rust and JavaScript","After a number of weeks getting to grips with the basics of Rust and some of the syntax I'm going to explore how we can use Rust code with JavaScript via Web Assembly.","blockquote","language-text","getting-started","Getting Started","building-the-project","Building the project","adding-the-package-it-to-a-web-page","Adding the package it to a web page","install-dependencies","Install Dependencies","using-local-package-in-www","Using local package in www","serving-locally","Serving Locally","wee_alloc","WeeAlloc","#[wasm_bindgen]","alert","package.json","language-json","\"wasm_game_of_life.d.ts\"","wasm-game-of-life\u002Fwww\u002Fpackage.json","head","attr-value","attr-equals","title","body","wasm-game-of-life\u002Fwww\u002Findex.js","language-javascript","import","imports","as"," wasm","\n\nwasm","method","property-access","install")));