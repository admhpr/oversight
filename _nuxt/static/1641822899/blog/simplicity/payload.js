__NUXT_JSONP__("/blog/simplicity", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v){return {data:[{post:{slug:g,title:g,date:"2021-11-29T06:05",desc:"thoughts on simplicity",tags:[g,"principles"],toc:[{id:p,depth:h,text:q},{id:r,depth:h,text:s},{id:t,depth:h,text:u}],body:{type:"root",children:[{type:b,tag:i,props:{id:p},children:[{type:b,tag:j,props:{ariaHidden:k,href:"#minimise-implicit-inputs-and-outputs",tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:q}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Implicit inputs are all of the inputs that aren’t arguments. And implicit outputs are all of the outputs that aren’t the return value."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"A function with implicit inputs and outputs is like a component hardwired to other components. It’s not modular. It can’t be used in another place. And its behavior depends on the behavior\nof the parts it’s connected to."}]},{type:a,value:c},{type:b,tag:i,props:{id:r},children:[{type:b,tag:j,props:{ariaHidden:k,href:"#design-is-about-pulling-things-apart",tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:s}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Functions give us a very natural way to separate concerns. Functions separate what value is provided as an argument from how the value is used. Very often, we are tempted to put things together.\nBigger, more complex things feel more substantial. But things that are pulled apart can always be composed back together. The hard part is figuring out useful ways to pull them apart."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Easier to reuse"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Smaller, simpler functions are easier to reuse. They do less. They make fewer assumptions."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Easier to maintain"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Smaller functions are easier to understand and maintain. They have less code. They are often obviously right (or wrong)."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Easier to test"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Smaller functions are easier to test. They do one thing, so you just test that one thing. Even if there is no identifiable problem in a function, if you see something you can pull out, it’s worth at least trying to extract it. It might lead to a better design."}]},{type:a,value:c},{type:b,tag:i,props:{id:t},children:[{type:b,tag:j,props:{ariaHidden:k,href:"#stratify-the-design-when-possible",tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:u}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Stratified design is a technique for building software in layers. Each layer defines new functions in terms of the functions in the layers below it. By training our sense of design, we can find arrangements of layers that make our software flexible to change, readable, easy to test, and much more reusable."}]},{type:a,value:c},{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-text","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:a,value:"business rules -\u003E entity operations -\u003E copy-on-write -\u003E built ins\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Pattern 1: Straightforward implementation"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The layer structure of stratified design should help us build straightforward implementations. When we read a function with a straightforward implementation, the problem the function signature presents should be solved at the right level of detail in the body. Too much detail is a code smell."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Pattern 2: Abstraction barrier"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Some layers provide an interface that lets us hide an important implementation detail. These layers help us write code at a higher level and free our limited mental capacity to think at a higher level."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Pattern 3: Minimal interface"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"As our system evolves, we want the interfaces to important business concepts to converge to a small, powerful set of operations.\nEvery other operation should be defined in terms of those, either directly or indirectly."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Pattern 4: Comfortable layers"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The patterns and practices of stratified design should serve our needs as programmers, who are in turn serving the business. We\nshould invest time in the layers that will help us deliver software faster and with higher quality. We don’t want to add layers for\nsport. The code and its layers of abstraction should feel comfortable to work in."}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002Fsimplicity",extension:".md",createdAt:v,updatedAt:v}}],fetch:{},mutations:void 0}}("text","element","\n","p","ul","li","simplicity",3,"h3","a","true",-1,"span","icon","icon-link","minimise-implicit-inputs-and-outputs","Minimise implicit inputs and outputs","design-is-about-pulling-things-apart","Design is about pulling things apart","stratify-the-design-when-possible","Stratify the design when possible","2022-01-10T13:53:06.007Z")));