__NUXT_JSONP__("/archive/template-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C){return {data:[{page:{slug:"template-pattern",title:"The Template Pattern",date:"2019-07-08T00:21",desc:u,taxonomy:{category:["blog"],tag:["design patterns","behavioural"]},feed:{limit:10},twitterenable:l,twittercardoptions:"summary",articleenabled:e,musiceventenabled:e,orgaenabled:e,orga:{ratingValue:v},orgaratingenabled:e,eventenabled:e,personenabled:e,musicalbumenabled:e,productenabled:e,product:{ratingValue:v},restaurantenabled:e,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:l,toc:[{id:w,depth:m,text:x},{id:y,depth:m,text:z},{id:A,depth:m,text:B}],body:{type:"root",children:[{type:b,tag:n,props:{id:w},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#name-template",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:n,props:{id:y},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#type-behavioural",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:n,props:{id:A},children:[{type:b,tag:o,props:{ariaHidden:p,href:"#use-when-you-want-to",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"define a skeleton of how a certain algorithm could be performed, and defer the implementation of those steps to the children classes"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:u}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Real World Example:"}]},{type:a,value:c},{type:b,tag:C,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Suppose we are getting some house built. The steps for building might look like"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:k,props:{},children:[{type:a,value:"    * Prepare the base of house\n    * Build the walls\n    * Add roof\n    * Add other floors\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The order of these steps could never be changed i.e. you can't build the roof before building the walls etc but each of the steps could be modified for example walls can be made of wood or polyester or stone."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In the example we are imagining that we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, linting report etc) and deploy our app on the test server."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"First of all we have our base class that specifies the skeleton for the build algorithm"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:k,props:{},children:[{type:a,value:"abstract class Builder {\n    build(){\n        this.test();\n        this.lint();\n        this.assemble();\n        this.deploy();\n    }\n\n    abstract test(): void;\n    abstract lint(): void ;\n    abstract assemble(): void;\n    abstract deploy(): void\n}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The implementations:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:k,props:{},children:[{type:a,value:"class AndroidBuilder extends Builder{\n    test(){     \n        console.log('Running android tests');\n    }\n\n    lint(){\n         console.log('Linting the android code');\n    }\n\n    assemble(){\n         console.log('Assembling the android build');\n    }\n\n    deploy(){\n         console.log('Deploying android build to server');\n    }\n}\n\nclass IosBuilder extends Builder{\n    test(){\n        console.log('Running ios tests');\n    }\n\n    lint(){\n        console.log('Linting the ios code');\n    }\n\n    assemble(){\n        console.log('Assembling the ios build');\n    }\n\n    deploy(){\n        console.log('Deploying ios build to server');\n    }\n}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Usage:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:k,props:{},children:[{type:a,value:"const androidBuilder = new AndroidBuilder();\nandroidBuilder.build();\n\n\u002F\u002F Output:\n\u002F\u002F Running android tests\n\u002F\u002F Linting the android code\n\u002F\u002F Assembling the android build\n\u002F\u002F Deploying android build to server\n\nconst iosBuilder = new IosBuilder();\niosBuilder.build();\n\n\u002F\u002F Output:\n\u002F\u002F Running ios tests\n\u002F\u002F Linting the ios code\n\u002F\u002F Assembling the ios build\n\u002F\u002F Deploying ios build to server\n"}]}]}]},{type:a,value:c},{type:b,tag:"script",props:{async:l,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fofkdt6rz\u002F2\u002Fembed\u002Fjs\u002F"},children:[]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Ftemplate-pattern",extension:".md",createdAt:"2020-11-24T08:50:03.343Z",updatedAt:"2020-11-29T09:26:28.276Z"}}],fetch:[],mutations:void 0}}("text","element","\n","p",false,"div","nuxt-content-highlight","pre","language-text","line-numbers","code",true,2,"h2","a","true",-1,"span","icon","icon-link","In software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm's structure.",2.5,"name-template","Name: Template","type-behavioural","Type: Behavioural","use-when-you-want-to","Use when you want to:","blockquote")));