__NUXT_JSONP__("/archive/builder-pattern", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F){return {data:[{page:{slug:"builder-pattern",title:"The Builder Pattern",date:"2018-12-31T00:00",desc:v,taxonomy:{category:["blog"],tag:["design patterns","creational"]},twitterenable:f,twittercardoptions:"summary",articleenabled:e,musiceventenabled:e,orgaenabled:e,orga:{ratingValue:w},orgaratingenabled:e,eventenabled:e,personenabled:e,musicalbumenabled:e,productenabled:e,product:{ratingValue:w},restaurantenabled:e,restaurant:{acceptsReservations:"yes",priceRange:"$"},facebookenable:f,toc:[{id:x,depth:g,text:y},{id:z,depth:g,text:A},{id:B,depth:g,text:C}],body:{type:"root",children:[{type:b,tag:h,props:{id:x},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#name-builder",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:h,props:{id:z},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#type-creational",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:h,props:{id:B},children:[{type:b,tag:i,props:{ariaHidden:j,href:"#use-when-you-want-to",tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:D,props:{},children:[{type:a,value:"do lots of things to build an object"}]},{type:a,value:c},{type:b,tag:D,props:{},children:[{type:a,value:"design classes whose constructors or static factories would have more than a handful of parameters."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"From Wikipedia:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Real World Example:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Imagine you are at your local sandwhich place. You could just order a premade and call it good. Not having to answer any questions about how you would like it made.\nBut what if you wanted some things on there. What bread you would like? If you want tomato? The builder pattern aims to provide this type of customisation of objects."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Main Purpose:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:E,props:{},children:[]},{type:a,value:"\n** A quick note on the telescoping constructor. \n"},{type:b,tag:d,props:{},children:[{type:a,value:"Example:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"enum BreadTypes { \n    wheat,\n    rye,\n    white,\n    oat\n}\n\nclass Sandwhich{\n    \u002F\u002F constructor is telescoping\n    constructor(breadType: BreadTypes, size: number, cheese = true, lettuce = true, tomato = false) {\n            \u002F\u002F instantiation logic\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"When a constructor takes a large number of parameters which become increasing difficult to understand as the number of parameters grow.\nThis is considered an anit-pattern and should be avoided. The builder pattern is one way to solve this."}]},{type:a,value:c},{type:b,tag:E,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Back to the builder..."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Typescript Code Example:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"enum BreadTypes { \n    wheat,\n    rye,\n    white,\n    oat\n}\n\nclass Sandwhich{\n    constructor(builder : SandwhichBuilder) {\n            \u002F\u002F ... \n    }\n}\n\nclass SandwhichBuilder{\n\n    public cheese: boolean;\n    public tomato: boolean;\n\n\n    constructor(public breadType: BreadTypes) { \n\n    }\n\n    addCheese(): this { \n        this.cheese = true;\n        return this\n    }\n\n    addTomato(): this { \n        this.tomato = true;\n        return this\n    }\n\n    build(): Sandwhich { \n        console.log(this)\n        return new Sandwhich(this)\n    }\n    \n}\n\nconst sandwhich = (new SandwhichBuilder(BreadTypes.wheat))\n    .addCheese()\n    .addTomato()\n    .build()\n \n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Full Example:"}]},{type:a,value:c},{type:b,tag:F,props:{async:f,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fe48pLck3\u002F15\u002Fembed\u002Fjs,result\u002F"},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Of course this can also be done with a simple object as a param like so:"}]},{type:a,value:c},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,t]},children:[{type:b,tag:u,props:{},children:[{type:a,value:"enum BreadTypes { \n    wheat,\n    rye,\n    white,\n    oat\n}\n\ninterface SandwhichBuilder { \n    breadType: BreadTypes,\n    cheese: boolean,\n    tomato: boolean\n}\nclass Sandwhich{\n    constructor(builder : SandwhichBuilder) {\n            \u002F\u002F ... \n    }\n}\n\nconst builder: SandwhichBuilder = { breadType: BreadTypes.rye, cheese: true, tomato: false}\n\nconst sandwhich = new Sandwhich(builder)\n\n"}]}]}]},{type:a,value:c},{type:b,tag:F,props:{async:f,src:"\u002F\u002Fjsfiddle.net\u002Fharps116\u002Fpg0yqa1c\u002F1\u002Fembed\u002Fjs,result\u002F"},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"That was the builder pattern... now what to build?"}]}]},dir:"\u002Farchive",path:"\u002Farchive\u002Fbuilder-pattern",extension:".md",createdAt:"2020-11-24T08:50:03.333Z",updatedAt:"2020-11-28T15:50:24.053Z"}}],fetch:[],mutations:void 0}}("text","element","\n","p",false,true,2,"h2","a","true",-1,"span","icon","icon-link","blockquote","div","nuxt-content-highlight","pre","language-text","line-numbers","code","The builder pattern is an object creation software design pattern with the intentions of finding a solution to the telescoping constructor** anti-pattern.",2.5,"name-builder","Name: Builder","type-creational","Type: Creational","use-when-you-want-to","Use when you want to:","li","hr","script")));